{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trilha de Desenvolvimento Web - AgroInsper 2025.2","text":""},{"location":"#bem-vindos","title":"Bem-Vindos!","text":"<p>Seja bem-vindo(a) \u00e0 Trilha de Desenvolvimento Web do AgroInsper 2025.2 </p> <p>Este material foi criado por membros da Engenharia do AgroInsper para ajudar os novos trainees e membros a aprenderem front-end, back-end e banco de dados, construindo juntos um projeto full-stack.</p>"},{"location":"#cronograma-de-aulas","title":"\ud83d\udcc5 Cronograma de Aulas","text":"<ul> <li> \u2705 Aula 1 \u2013 09/09/2025</li> <li> \u2705 Aula 2 \u2013 11/09/2025</li> <li> \u2705 Aula 3 \u2013 12/09/2025</li> <li> \ud83d\udd04 Aula 4 \u2013 15/09/2025</li> <li> \ud83d\udd04 Aula 5 \u2013 19/09/2025</li> </ul>"},{"location":"#sobre-mim","title":"Sobre mim","text":"<p>Victor Faria Soares 6\u00ba semestre de Engenharia de Computa\u00e7\u00e3o \u2013 Insper  </p> <p>Entrei no AgroInsper em 2024.1 como trainee de Engenharia, participando de um projeto com a SarDrones, onde desenvolvemos uma aplica\u00e7\u00e3o web para centralizar dados de voos de drones no agroneg\u00f3cio. </p> <p>No semestre seguinte (2024.2), assumi a coordena\u00e7\u00e3o da \u00e1rea, liderando um projeto em parceria com a Aurica. Nossa miss\u00e3o foi criar um chatbot de Intelig\u00eancia Artificial para ESG e sustentabilidade. Ao final do semestre, tivemos a honra de receber o reconhecimento de projeto destaque do semestre.</p> <p>Em 2025.1, tive a oportunidade de atuar como Diretor de RH, liderando todo o processo seletivo da entidade e apoiando tamb\u00e9m o time de Engenharia no desenvolvimento do novo site institucional do AgroInsper.  </p> <p>Agora, em 2025.2, atuo como membro consultor e respons\u00e1vel por esta Trilha de Desenvolvimento Web, com apoio do Fernando Lima.</p> <p>Espero que gostem do conte\u00fado e que ele seja \u00fatil para voc\u00eas!</p>"},{"location":"#referencias","title":"\ud83d\udcda Refer\u00eancias","text":"<ul> <li>Material for MkDocs</li> <li>Documenta\u00e7\u00e3o React</li> <li>Documenta\u00e7\u00e3o Flask</li> <li>PostgreSQL</li> </ul>"},{"location":"aula_1/aula_1/","title":"Aula 1 - Introdu\u00e7\u00e3o ao Desenvolvimento Web","text":""},{"location":"aula_1/aula_1/#fundamentos-de-desenvolvimento-web","title":"Fundamentos de Desenvolvimento Web","text":"<p>Vamos ao que interessa! A ideia \u00e9 que ao final desta trilha possam ser capazes de desenvolver um site completo e funcional, com front-end, back-end, banco de dados e deploy. </p> <p>Aproveitando que j\u00e1 come\u00e7amos com alguns termos, voc\u00eas j\u00e1 deveriam saber mas de qualquer maneira:</p>"},{"location":"aula_1/aula_1/#o-que-e-front-end","title":"O que \u00e9 Front-End?","text":"<p>Basicamente, Front-End \u00e9 a parte da aplica\u00e7\u00e3o com a qual o usu\u00e1rio interage diretamente. Ele \u00e9 constru\u00eddo usando linguagens como HTML, CSS e JavaScript, podendo tamb\u00e9m utilizar frameworks como React \u2014 que veremos aqui.</p>"},{"location":"aula_1/aula_1/#o-que-e-back-end","title":"O que \u00e9 Back-End?","text":"<p>Basicamente, Back-End \u00e9 a parte da aplica\u00e7\u00e3o que roda \u201cpor tr\u00e1s das cortinas\u201d, respons\u00e1vel por processar dados, aplicar regras de neg\u00f3cio, acessar bancos de dados e enviar as informa\u00e7\u00f5es para o Front-End.</p> <p>Ele \u00e9 desenvolvido usando linguagens como JavaScript (Node.js), Python, Java, PHP, entre outras, e pode utilizar frameworks e bibliotecas como Express, Django ou Spring para agilizar o desenvolvimento.</p> <p>O usu\u00e1rio n\u00e3o v\u00ea diretamente o Back-End, mas tudo o que ele faz na tela depende do que acontece nessa camada.</p>"},{"location":"aula_1/aula_1/#framework","title":"Framework","text":"<p>\u00c9 um conjunto de ferramentas e padr\u00f5es que acelera o desenvolvimento (roteamento, templates, integra\u00e7\u00f5es). Diferente de uma biblioteca, o framework \u201cdirige\u201d o fluxo e voc\u00ea \u201cpreenche os espa\u00e7os\u201d.</p>"},{"location":"aula_1/aula_1/#agora-que-ja-sabem-o-basico-do-vocabulario-podemos-adentrar-um-pouco-mais-em-desenvolvimento-web-propriamente-dito-e-algumas-de-suas-particularidades","title":"Agora que j\u00e1 sabem o b\u00e1sico do vocabul\u00e1rio podemos adentrar um pouco mais em desenvolvimento web propriamente dito e algumas de suas particularidades.","text":""},{"location":"aula_1/aula_1/#o-que-e-desenvolvimento-web","title":"O que \u00e9 desenvolvimento web?","text":"<p>Agora essa defini\u00e7\u00e3o deve ficar mais clara para voc\u00eas:</p> <p>Desenvolvimento web consiste em criar aplica\u00e7\u00f5es que rodam no navegador (front-end) e em servidores (back-end), trocando dados pela internet via protocolos (regras de comunica\u00e7\u00e3o). O navegador faz requisi\u00e7\u00f5es e o servidor responde com conte\u00fado (geralmente HTML/CSS/JS ou JSON).</p> <p></p>"},{"location":"aula_1/aula_1/#o-que-e-um-protocolo","title":"O que \u00e9 um protocolo?","text":"<p>Protocolo \u00e9 um conjunto de regras para dois lados se comunicarem. Na Web usamos uma pilha de protocolos:</p> <ul> <li>HTTP/HTTPS (aplica\u00e7\u00e3o): regras para pedir p\u00e1ginas/dados.</li> <li>TLS (seguran\u00e7a do HTTPS): criptografa a conversa.</li> <li>TCP/IP (transporte/rede): entrega os pacotes de dados.</li> <li>DNS (nomea\u00e7\u00e3o): traduz <code>meusite.com</code> para um IP.</li> </ul> <p>Pense como um \u201cidioma + etiqueta\u201d que todos concordam em usar para se entender.</p>"},{"location":"aula_1/aula_1/#http-e-https","title":"HTTP e HTTPS","text":"<p>HTTP (HyperText Transfer Protocol) define como requisi\u00e7\u00f5es e respostas s\u00e3o feitas. \u00c9 sem estado (stateless): cada requisi\u00e7\u00e3o \u00e9 independente. HTTPS = HTTP + TLS (cadeado no navegador): a comunica\u00e7\u00e3o \u00e9 criptografada e autenticada por certificados digitais.</p>"},{"location":"aula_1/aula_1/#anatomia-de-uma-url-uniform-resource-locator","title":"Anatomia de uma URL (Uniform Resource Locator)","text":""},{"location":"aula_1/aula_1/#crud","title":"CRUD","text":"<p>CRUD \u00e9 um acr\u00f4nimo para \"Create, Read, Update, Delete\" (Criar, Ler, Atualizar, Apagar), que descreve as quatro opera\u00e7\u00f5es b\u00e1sicas de gerenciamento de dados em sistemas de armazenamento persistente, como bancos de dados. </p>"},{"location":"aula_1/aula_1/#verbos-metodos-http-mapeando-para-crud","title":"Verbos (m\u00e9todos) HTTP \u2014 mapeando para CRUD","text":"Verbo Uso comum CRUD GET obter recurso R POST criar recurso/a\u00e7\u00e3o C PUT substituir recurso inteiro U PATCH atualizar parcial U DELETE remover recurso D"},{"location":"aula_1/aula_1/#exemplo-de-requisicao-e-resposta-http-simplificado","title":"Exemplo de requisi\u00e7\u00e3o e resposta HTTP (simplificado)","text":"<pre><code>GET /api/posts HTTP/1.1\nHost: exemplo.com\nAccept: application/json\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\"id\":1,\"title\":\"Ol\u00e1\"},{\"id\":2,\"title\":\"Web\"}]\n</code></pre>"},{"location":"aula_1/aula_1/#codigos-de-status","title":"C\u00f3digos de status","text":"<ul> <li>2xx sucesso: 200 OK, 201 Created, 204 No Content</li> <li>3xx redirecionamento: 301/302</li> <li>4xx erro do cliente: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 409 Conflict, 422 Unprocessable Entity, 429 Too Many Requests</li> <li>5xx erro do servidor: 500 Internal Server Error, 502/503</li> </ul>"},{"location":"aula_1/aula_1/#apis-json-e-rest","title":"APIs, JSON e REST","text":""},{"location":"aula_1/aula_1/#o-que-e-uma-api","title":"O que \u00e9 uma API?","text":"<p>API significa Application Programming Interface (Interface de Programa\u00e7\u00e3o de Aplica\u00e7\u00f5es). Em termos simples:</p> <p>\u00c9 um \u201ccard\u00e1pio\u201d de funcionalidades que um software oferece para que outro software possa usar.</p> <p>Na web, falamos muito de API HTTP \u2014 ou seja, uma API acess\u00edvel atrav\u00e9s de requisi\u00e7\u00f5es HTTP, que podem ser feitas por:</p> <ul> <li>Front-end (ex.: um site em React consumindo dados do servidor)</li> <li>Aplicativos mobile</li> <li>Outros sistemas (integra\u00e7\u00f5es)</li> </ul> <p>Uma API define:</p> <ol> <li>O que posso pedir (endpoints, m\u00e9todos, par\u00e2metros)</li> <li>Como devo pedir (m\u00e9todos HTTP, headers, formato do corpo)</li> <li>O que recebo de volta (formato e estrutura da resposta)</li> </ol>"},{"location":"aula_1/aula_1/#o-que-e-json","title":"O que \u00e9 JSON?","text":"<p>JSON (JavaScript Object Notation) \u00e9 o formato mais comum para trocar dados entre sistemas na web.</p> <ul> <li>\u00c9 texto puro, f\u00e1cil de ler e escrever.</li> <li>Estrutura parecida com objetos JavaScript: chaves <code>{}</code>, pares <code>chave: valor</code>, listas <code>[]</code>.</li> <li>Suporta tipos b\u00e1sicos: string, n\u00famero, booleano, nulo, objeto e lista.</li> </ul> <p>Exemplo:</p> <pre><code>{\n  \"id\": 1,\n  \"title\": \"Meu post\",\n  \"published\": true,\n  \"tags\": [\"react\", \"flask\", \"postgres\"]\n}\n</code></pre> <p>Por que usar JSON?</p> <ul> <li>\u00c9 leve e f\u00e1cil de transportar pela rede.</li> <li>\u00c9 compreendido por praticamente todas as linguagens modernas.</li> <li>Convers\u00e3o simples em Python (<code>json.loads</code> / <code>json.dumps</code>) e JS (<code>JSON.parse</code> / <code>JSON.stringify</code>).</li> </ul>"},{"location":"aula_1/aula_1/#o-que-e-rest","title":"O que \u00e9 REST?","text":"<p>REST (Representational State Transfer) \u00e9 um estilo de arquitetura para APIs HTTP. N\u00e3o \u00e9 uma tecnologia, mas sim um conjunto de princ\u00edpios para organizar uma API de forma clara e padronizada.</p> <p>Princ\u00edpios b\u00e1sicos:</p> <ol> <li> <p>Recursos s\u00e3o substantivos, n\u00e3o verbos</p> </li> <li> <p><code>/users</code> \u2192 lista de usu\u00e1rios</p> </li> <li><code>/posts/42</code> \u2192 post com id 42</li> <li> <p>M\u00e9todos HTTP representam a\u00e7\u00f5es</p> </li> <li> <p><code>GET /posts</code> \u2192 listar posts</p> </li> <li><code>POST /posts</code> \u2192 criar post</li> <li><code>GET /posts/42</code> \u2192 obter post 42</li> <li><code>PUT /posts/42</code> \u2192 atualizar post 42</li> <li><code>PATCH /posts/42</code> \u2192 atualizar parte do post 42</li> <li><code>DELETE /posts/42</code> \u2192 apagar post 42</li> <li>Stateless \u2014 cada requisi\u00e7\u00e3o \u00e9 independente; o servidor n\u00e3o guarda contexto entre elas (exceto em mecanismos expl\u00edcitos como sess\u00f5es).</li> <li>Formatos padronizados \u2014 normalmente JSON, mas pode ser XML, CSV etc.</li> <li>Status codes HTTP informam o resultado (200, 201, 404, 500, etc.).</li> </ol>"},{"location":"aula_1/aula_1/#o-que-e-uma-api-rest","title":"O que \u00e9 uma API REST?","text":"<p>\u00c9 uma API HTTP que segue os princ\u00edpios REST:</p> <ul> <li>Usa m\u00e9todos HTTP de forma sem\u00e2ntica (<code>GET</code>, <code>POST</code>, etc.).</li> <li>Organiza URLs por recursos.</li> <li>Usa status codes adequados.</li> <li>\u00c9 stateless.</li> <li>Usa formatos padronizados de resposta (geralmente JSON).</li> </ul> <p>Exemplo de API REST (simplificada):</p> <pre><code>GET /products          \u2192 lista todos os produtos\nPOST /products         \u2192 cria um novo produto\nGET /products/10       \u2192 retorna produto com id 10\nPUT /products/10       \u2192 substitui produto 10\nPATCH /products/10     \u2192 altera parcialmente produto 10\nDELETE /products/10    \u2192 remove produto 10\n</code></pre>"},{"location":"aula_1/aula_1/#_1","title":"Aula 1","text":""},{"location":"aula_1/aula_1/#e-o-que-e-fastapi","title":"E o que \u00e9 FastAPI?","text":"<p>O FastAPI \u00e9 um framework Python para criar APIs.</p> <ul> <li>Facilita a cria\u00e7\u00e3o de APIs REST ou GraphQL.</li> <li>Faz valida\u00e7\u00e3o autom\u00e1tica dos dados de entrada com type hints do Python.</li> <li>Muito usado em APIs que precisam ser r\u00e1pidas e seguras.</li> </ul>"},{"location":"aula_1/aula_1/#cookies-sessao-e-jwt","title":"Cookies, sess\u00e3o e JWT","text":"<p>Entre uma requisi\u00e7\u00e3o e outra, temos diversos par\u00e2metros que podem surgir, alguns deles abaixo:</p> <ul> <li>Cookies: pequenos dados salvos pelo navegador, podem carregar tokens.</li> <li>Sess\u00e3o: o servidor guarda estado do usu\u00e1rio (ex.: logado).</li> <li>JWT: token assinado que o cliente envia no header <code>Authorization: Bearer &lt;token&gt;</code>. O servidor valida e autoriza sem guardar estado por usu\u00e1rio.</li> </ul>"},{"location":"aula_1/aula_1/#o-que-e-cors-cross-origin-resource-sharing","title":"O que \u00e9 CORS (Cross-Origin Resource Sharing)?","text":"<p>Por padr\u00e3o, os navegadores aplicam a Same-Origin Policy (pol\u00edtica de mesma origem):</p> <p>Uma p\u00e1gina s\u00f3 pode fazer requisi\u00e7\u00f5es AJAX/fetch para o mesmo origin (mesmo protocolo, dom\u00ednio e porta) de onde foi carregada.</p> <p>Exemplo:</p> <ul> <li>Front hospedado em <code>http://localhost:5173</code></li> <li>API hospedada em <code>http://localhost:5000</code></li> </ul> <p>Mesmo que ambos estejam no mesmo computador, origens diferentes \u2192 o navegador bloqueia a requisi\u00e7\u00e3o por seguran\u00e7a.</p>"},{"location":"aula_1/aula_1/#onde-entra-o-cors","title":"Onde entra o CORS?","text":"<p>O CORS \u00e9 um mecanismo que permite ao servidor dizer ao navegador:</p> <p>\u201cEssa origem X est\u00e1 autorizada a acessar meus recursos.\u201d</p> <p>Ele funciona adicionando headers HTTP especiais na resposta, como:</p> <pre><code>Access-Control-Allow-Origin: http://localhost:5173\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\n</code></pre>"},{"location":"aula_1/aula_1/#em-desenvolvimento","title":"Em desenvolvimento","text":"<ul> <li>\u00c9 normal ter problemas de CORS quando o front e back rodam em portas diferentes.</li> <li>No Flask, resolvemos facilmente com a biblioteca <code>flask-cors</code>:</li> </ul> <pre><code>from flask_cors import CORS\nCORS(app, origins=[\"http://localhost:5173\"])\n</code></pre>"},{"location":"aula_1/aula_1/#dica","title":"Dica","text":"<p>Se algo \u201cn\u00e3o abre\u201d, confira porta, URL e CORS.</p>"},{"location":"aula_1/aula_1/#portas-comuns","title":"Portas comuns","text":"<ul> <li>80 HTTP, 443 HTTPS</li> <li>5173 Vite (front, dev)</li> <li>5000 Flask (back, dev)</li> <li>5432 PostgreSQL</li> </ul>"},{"location":"aula_1/aula_1/#mini-lab-10-minutos","title":"Mini-lab (10 minutos)","text":""},{"location":"aula_1/aula_1/#enviando-requisicoes","title":"Enviando requisi\u00e7\u00f5es","text":"<p>Vamos testar algumas requisi\u00e7\u00f5es para vermos como funciona. Abra </p> <p>Windows: use PowerShell.</p> <p>macOS/Linux: terminal padr\u00e3o.</p> <ol> <li>GET simples (JSON):</li> </ol> <pre><code>Invoke-WebRequest -Uri \"https://jsonplaceholder.typicode.com/posts/1\"\n</code></pre> <ol> <li>POST com JSON:</li> </ol> <pre><code>Invoke-WebRequest -Uri \"https://jsonplaceholder.typicode.com/posts\" `\n  -Method POST `\n  -Body '{\"title\":\"Meu Post\",\"body\":\"Conte\u00fado\",\"userId\":1}' `\n  -ContentType \"application/json\"\n</code></pre>"},{"location":"aula_1/aula_1/#testando-o-inspecionar","title":"Testando o Inspecionar","text":"<ol> <li>Abra o Chrome </li> <li>Bot\u00e3o Direito \u2192 Inspecionar</li> <li>abra Network e recarregue a p\u00e1gina. Veja m\u00e9todo, status, headers e response.</li> </ol>"},{"location":"aula_2/aula_2/","title":"Aula 2 \u2014 Ambiente de Desenvolvimento + Front-end (Parte 1)","text":"<p>Objetivo da aula: Agora que ja entenderam o b\u00e1sico do desenvolvimento web, est\u00e1 na hora de prepararmos o ambiente de desenvolvimento de vo\u00eas para construir um projeto full\u2011stack (git, venv, Node, estrutura de pastas) e construir o esqueleto do front-end em React + Vite com roteamento, layout base e p\u00e1ginas iniciais.</p>"},{"location":"aula_2/aula_2/#1-organizacao-do-repositorio-monorepo-simples","title":"1) Organiza\u00e7\u00e3o do reposit\u00f3rio (monorepo simples)","text":"<p>Por ser um projeto simples, usaremos um \u00fanico reposit\u00f3rio com duas pastas na raiz:</p> <pre><code>trilha-dev-web/\n\u251c\u2500 frontend/   # React + Vite\n\u2514\u2500 backend/    # Flask\n</code></pre> <p>## 1.1. Cria\u00e7\u00e3o do reposit\u00f3rio no github</p> <p>Para come\u00e7ar, crie um reposit\u00f3rio no github preferencialmente com o nome que preferir. </p> <p>## 1.2. Clonar o reposit\u00f3rio na sua m\u00e1quina</p> <p></p> <p>Abra um terminal powershell na sua m\u00e1quina. \u00c9 s\u00f3 pesquisar por PowerShell</p> <p></p> <p>Com o terminal aberto e na pasta desejada, \u00e9 s\u00f3 digitar <code>git clone [colar seu HTTPS]</code>, entrar na pasta e digitar <code>code .</code> para abrir o VS Code.</p> <p>Pronto, seu reposit\u00f3rio est\u00e1 clonado em sua m\u00e1quina!</p> <p>## 1.3. Crie um arquivo .gitignore na raiz para ignorar arquivos comuns a Node e Python:</p> <p>Agora que temos o reposit\u00f3rio criado, precisamos garantir que apenas os arquivos realmente importantes sejam enviados para o GitHub. Para isso usamos o .gitignore: um arquivo de configura\u00e7\u00e3o que indica ao Git quais arquivos e pastas devem ser ignorados no versionamento. Isso \u00e9 essencial porque, durante o desenvolvimento, surgem muitos arquivos tempor\u00e1rios ou espec\u00edficos do ambiente local (como <code>node_modules</code>, <code>__pycache__</code> ou vari\u00e1veis em <code>.env</code>(que veremos mais para frente)). Eles s\u00e3o necess\u00e1rios para rodar o projeto na sua m\u00e1quina, mas n\u00e3o devem ir para o reposit\u00f3rio.</p> <p>Caso esteja muito confuso, n\u00e3o se preocupe que com o tempo cada linha do gitignore far\u00e1 sentido. </p> <p>Crie um arquivo <code>.gitignore</code> na pasta raiz do seu reposit\u00f3rio e adicione o conte\u00fado abaixo.</p> <pre><code># --- Node ---\nnode_modules/\n*.log\n# Vite\nfrontend/dist/\n\n# --- Python ---\n.venv/\nbackend/venv-back\nfrontend/venv-front\n__pycache__/\n*.pyc\ninstance/\n.env\n\n# --- OS/Editor ---\n.DS_Store\n.vscode/\n</code></pre>"},{"location":"aula_2/aula_2/#2-preparando-o-ambiente-de-desenvolvimento","title":"2) Preparando o ambiente de desenvolvimento","text":"<p>Antes de come\u00e7ar, precisamos falar sobre <code>ambientes virtuais (venv)</code>.</p> <p>O venv \u00e9 um recurso do Python que cria um ambiente virtual isolado para o seu projeto. Isso significa que cada aplica\u00e7\u00e3o pode ter suas pr\u00f3prias bibliotecas e vers\u00f5es de depend\u00eancias, sem entrar em conflito com outros projetos na sua m\u00e1quina. Imagine que em um projeto voc\u00ea precisa do Flask 2.x e em outro do Flask 3.x: com ambientes virtuais, isso \u00e9 poss\u00edvel sem bagun\u00e7a. Portanto,</p> <ul> <li> <p>Mant\u00e9m as depend\u00eancias organizadas por projeto.</p> </li> <li> <p>Evita conflitos de vers\u00f5es entre diferentes aplica\u00e7\u00f5es.</p> </li> <li> <p>Facilita a instala\u00e7\u00e3o e remo\u00e7\u00e3o de pacotes sem afetar o Python global da sua m\u00e1quina.</p> </li> </ul> <p>Aqui nesta trilha e no projeto de voc\u00eas, vamos criar um ambiente virtual para o back, front n\u00e3o precisa.</p>"},{"location":"aula_2/aula_2/#21-criar-a-venv","title":"2.1 Criar a venv","text":"<pre><code>cd backend # entra na pasta do back\npython -m venv venv-back\n</code></pre> <p>Isso ira criar uma pasta com o nome <code>venv-back</code></p>"},{"location":"aula_2/aula_2/#22-ativar-a-venv","title":"2.2 Ativar a venv:","text":"<pre><code># Windows (PowerShell):\nvenv-back\\Scripts\\activate\n</code></pre> <pre><code># macOS/Linux:\nsource venv-back/bin/activate\n</code></pre> <p>Para saber se voc\u00ea ativou corretamente o ambiente virtual, ele deve aparecer no terminal escrito em verde.  </p> <p>OBS: Voc\u00ea deve abrir o VS Code somente depois de ativar a venv, pode digitar no mesmo terminal <code>code .</code> Ou tamb\u00e9m abrir o VS e pelo terminal dele ativar o ambiente virtual. Mas garanta que est\u00e1 trabalhando com a venv, que deve aparecer no canto inferior do seu VS.</p> <p>Exemplo:</p> <p></p> <p>Caso n\u00e3o apare\u00e7a, clique no bot\u00e3o que esta aparecendo o interpretador atual (terceiro da esquerda para a direita). E entre em 'Enter interpreter path'. Cole o caminho completo do seu ambiente, exemplo: </p> <p><code>C:\\Users\\victo\\OneDrive\\Documentos\\INSPER\\Entidades\\AgroInsper\\2025.2\\trilha_dev_web\\trilha-dev-web\\backend\\venv-back\\Scripts\\python.exe</code></p>"},{"location":"aula_2/aula_2/#23-requirementstxt","title":"2.3 requirements.txt","text":"<p>O arquivo <code>requirements.txt</code> \u00e9 utilizado em projetos Python para listar todas as depend\u00eancias (bibliotecas e suas vers\u00f5es) necess\u00e1rias para o funcionamento do projeto. Com ele, \u00e9 poss\u00edvel instalar facilmente todos os pacotes necess\u00e1rios usando o comando <code>pip install -r requirements.txt</code>. Isso facilita o compartilhamento e a reprodu\u00e7\u00e3o do ambiente de desenvolvimento entre diferentes pessoas e m\u00e1quinas. Crie <code>backend/requirements.txt</code> com o m\u00ednimo necess\u00e1rio para come\u00e7ar:</p> <pre><code>Flask\npython-dotenv\nFlask-Cors\n</code></pre> <p>Instale:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Se quiser ver quais pacotes e vers\u00f5es est\u00e3o instalados neste ambiente, \u00e9 s\u00f3 digitar:</p> <pre><code>pip list\n</code></pre> <p>Para desativar o ambiente virtual:</p> <pre><code>deactivate\n</code></pre> <p>Se eventualmente voc\u00ea baixar algum pacote \"na m\u00e3o\" com o comando <code>pip install XXX</code> (o que \u00e9 bem comum) e quiser colocar este novo pacote no requirements.txt, pode mandar o comando abaixo:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"aula_2/aula_2/#3-front-end-vite-react","title":"3) Front-end: Vite + React","text":"<p>Com o ambiente pronto para o desenvolvimento vamos criar nosso frontend com Vite + React. \u00c9 uma boa pr\u00e1tica sempre olharem a documenta\u00e7\u00e3o do framework para entender o que est\u00e3o fazendo.</p> <p>Para fins de curiosidade, os templates no Vite s\u00e3o configura\u00e7\u00f5es pr\u00e9-definidas que ajudam a iniciar um projeto com uma tecnologia ou framework espec\u00edfico. Eles incluem a estrutura b\u00e1sica do projeto, arquivos de configura\u00e7\u00e3o e depend\u00eancias necess\u00e1rias para come\u00e7ar a trabalhar com o framework escolhido. </p> <p>Outros templates dispon\u00edveis no Vite incluem:</p> <p><code>vanilla</code>, <code>vue</code>, <code>svelte</code>, <code>lit</code>, <code>preact</code>, <code>solid</code> e <code>qwik</code>.</p> <p>Documenta\u00e7\u00e3o Vite</p>"},{"location":"aula_2/aula_2/#31-criar-projeto","title":"3.1 Criar projeto","text":"<pre><code>cd frontend\n\nnpm create vite@latest . -- --template react\n# Selecione: Framework - React e Variant: JavaScript\n\nnpm install\n</code></pre>"},{"location":"aula_2/aula_2/#32-testar-funcionamento","title":"3.2 Testar funcionamento","text":"<p>Nesse ponto ja conseguimos abrir o projeto e ver se esta funcionando corretamente. Rode </p> <pre><code>npm run dev\n</code></pre> <p>E o projeto deve abrir no http://localhost:5173/ e voc\u00ea deve encontrar a seguinte p\u00e1gina:</p> <p></p>"},{"location":"aula_2/aula_2/#4-estrutura-de-pastas-e-arquivos-do-frontend","title":"4) Estrutura de pastas e arquivos do frontend","text":"<p>Depois de criar o projeto com Vite + React, sua pasta <code>frontend/</code> deve estar parecida com a descrita abaixo. Vamos entender para que serve cada parte:</p> <ul> <li> <p><code>node_modules/</code> \u2192 onde ficam todas as depend\u00eancias instaladas com <code>npm install</code>. Voc\u00ea nunca altera nada aqui manualmente e essa pasta NUNCA deve ser commitada.</p> </li> <li> <p><code>public/</code> \u2192 arquivos est\u00e1ticos como imagens e \u00edcones. J\u00e1 vem com o <code>vite.svg</code> de exemplo.</p> </li> <li> <p><code>src/</code>   \u2192 diret\u00f3rio principal do c\u00f3digo fonte.</p> </li> <li> <p><code>assets/</code> \u2192 pasta para imagens, \u00edcones e outros arquivos est\u00e1ticos que voc\u00ea vai importar dentro do c\u00f3digo React (vem com <code>react.svg</code>).</p> </li> <li> <p><code>App.jsx</code> \u2192 componente principal da aplica\u00e7\u00e3o React. Normalmente \u00e9 o ponto inicial da UI.</p> </li> <li> <p><code>App.css</code> \u2192 estilos usados dentro do <code>App.jsx</code>.</p> </li> <li> <p><code>index.css</code> \u2192 estilos globais da aplica\u00e7\u00e3o, aplicados em todas as p\u00e1ginas.</p> </li> <li> <p><code>main.jsx</code> \u2192 arquivo de entrada da aplica\u00e7\u00e3o. Aqui o React inicializa e renderiza o <code>App</code> dentro da <code>div#root</code> do <code>index.html</code>.</p> </li> <li> <p><code>.gitignore</code> \u2192 define o que ser\u00e1 ignorado no versionamento do Git.</p> </li> <li> <p><code>eslint.config.js</code> \u2192 configura\u00e7\u00e3o b\u00e1sica do ESLint (padr\u00e3o do Vite).</p> </li> <li> <p><code>index.html</code> \u2192 p\u00e1gina HTML base. O Vite injeta seu JavaScript aqui no <code>div#root</code>.</p> </li> <li> <p><code>package.json</code> \u2192 lista depend\u00eancias, scripts e metadados do projeto.</p> </li> <li> <p><code>package-lock.json</code> \u2192 arquivo gerado automaticamente, garante que todos usem as mesmas vers\u00f5es das depend\u00eancias.</p> </li> <li> <p><code>README.md</code> \u2192 instru\u00e7\u00f5es b\u00e1sicas do projeto (geradas pelo Vite).</p> </li> <li> <p><code>vite.config.js</code> \u2192 configura\u00e7\u00f5es do Vite (pode ser alterado para plugins, aliases, etc.).</p> </li> </ul>"},{"location":"aula_2/aula_2/#41-fluxo-resumido-do-react-com-vite","title":"4.1 Fluxo resumido do React com Vite","text":"<p>Para entender melhor o que acontece quando rodamos <code>npm run dev</code>:</p> <ol> <li> <p>O Vite inicia um servidor de desenvolvimento e carrega o arquivo <code>index.html</code>.</p> </li> <li> <p>Dentro do <code>index.html</code>, existe a tag <code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code> que ser\u00e1 o ponto de montagem da aplica\u00e7\u00e3o React.</p> </li> <li> <p>O <code>index.html</code> importa o <code>main.jsx</code>, que \u00e9 o arquivo de entrada do projeto.</p> </li> <li> <p>No <code>main.jsx</code>, o React cria a raiz (<code>ReactDOM.createRoot</code>) e renderiza o componente principal <code>App.jsx</code> dentro da <code>div#root</code>.</p> </li> <li> <p>O <code>App.jsx</code> pode importar outros componentes, p\u00e1ginas, estilos (como <code>App.css</code>) e ir expandindo a interface.</p> </li> <li> <p>Estilos globais s\u00e3o aplicados a partir do <code>index.css</code>.</p> </li> </ol> <p>Em resumo: <code>npm run dev</code> \u2192 Vite \u2192 <code>index.html</code> \u2192 <code>main.jsx</code> \u2192 <code>App.jsx</code> \u2192 seus componentes.</p>"},{"location":"aula_2/aula_2/#5-react-router","title":"5) React Router","text":"<p>O React Router \u00e9 a biblioteca que adiciona ao React a capacidade de ter m\u00faltiplas p\u00e1ginas (rotas).</p> <pre><code>npm install react-router-dom\n</code></pre>"},{"location":"aula_2/aula_2/#6-implementacao-de-pagina-basica","title":"6) Implementa\u00e7\u00e3o de p\u00e1gina b\u00e1sica","text":"<p>Vamos implementar uma p\u00e1gina Contact com um formul\u00e1rio simples (nome, email, mensagem) e rota <code>/contact</code>. Ela poder\u00e1 ser acessada da p\u00e1gina Home atrav\u00e9s de um bot\u00e3o.</p> <ol> <li> <p>Criar as rotas</p> </li> <li> <p><code>src/app/layout.jsx</code> aqui estamos criando um layout super b\u00e1sico que ter\u00e1 um bot\u00e3o Home e outro Contact.</p> </li> </ol> <pre><code>import { Outlet, NavLink } from \"react-router-dom\";\n\nexport default function Layout() {\n    return (\n        &lt;div className=\"shell\"&gt;\n            &lt;nav className=\"nav\"&gt;\n                &lt;NavLink to=\"/\" className=\"nav-link\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\" className=\"nav-link\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n            &lt;main className=\"center\"&gt; {/*aqui entram os conteudos da p\u00e1gina home e da p\u00e1gina layout */}\n                &lt;Outlet /&gt; \n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\n\n</code></pre> <ol> <li><code>src/pages/Home.jsx</code> Aqui est\u00e1 sendo definido um componente funcional chamado Home. Ele retorna um elemento <code>&lt;h1&gt;</code> com o texto \"Home\". Este componente \u00e9 usado para renderizar a p\u00e1gina inicial.</li> </ol> <pre><code>export default function Home() {\n    return &lt;h1&gt;Home&lt;/h1&gt;;\n}\n</code></pre> <ol> <li><code>src/pages/Contact.jsx</code> Aqui esta sendo definido um componente funcional chamado Contact. Ele retorna um elemento <code>&lt;form&gt;</code> com campos para nome, email e mensagem. Este componente \u00e9 usado para renderizar a p\u00e1gina de contato.</li> </ol> <pre><code>export default function Contact() {\n    return (\n        &lt;form className=\"card\"&gt;\n            &lt;input name=\"name\" placeholder=\"Seu nome\" /&gt;\n            &lt;input name=\"email\" placeholder=\"Seu email\" /&gt;\n            &lt;textarea name=\"message\" placeholder=\"Mensagem\" /&gt;\n            &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n\n</code></pre> <ol> <li><code>src/app/routes.jsx</code> Aqui estamos definindo as rotas da aplica\u00e7\u00e3o.</li> </ol> <pre><code>import { createBrowserRouter } from \"react-router-dom\";\nimport Layout from \"./layout\";\nimport Home from \"../pages/Home\";\nimport Contact from \"../pages/Contact\";\n\nexport const router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: &lt;Layout /&gt;,\n        children: [\n            { index: true, element: &lt;Home /&gt; },\n            { path: \"contact\", element: &lt;Contact /&gt; },\n            { path: \"*\", element: &lt;div&gt;404 - Not Found&lt;/div&gt; },\n        ],\n    },\n]);\n</code></pre> <ol> <li>Trocar o <code>main.jsx</code> para usar o Router. Aqui estamos importando o RouterProvider e passando o router criado anteriormente.</li> </ol> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { RouterProvider } from \"react-router-dom\";\nimport { router } from \"./app/routes\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n    &lt;React.StrictMode&gt;\n        &lt;RouterProvider router={router} /&gt;\n    &lt;/React.StrictMode&gt;\n);\n</code></pre> <ol> <li>Adicionar todos os estilos em <code>index.css</code></li> </ol> <pre><code>/* Reset/estrutura base */\n* { box-sizing: border-box; }\nhtml, body, #root { height: 100%; }\nbody {\n  margin: 0;\n  font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\n  background: #1f1f1f;\n  color: #f4f4f5;\n}\n\n/* Shell do app: nav em cima + conte\u00fado centralizado */\n.shell {\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Navbar simples */\n.nav {\n  display: flex;\n  gap: 12px;\n  padding: 12px 16px;\n}\n\n/* \u00c1rea central: centro exato da viewport */\n.center {\n  flex: 1;\n  display: grid;\n  place-items: center;   /* centraliza vertical e horizontal */\n  padding: 24px;\n}\n\n/* Cart\u00e3o gen\u00e9rico (\u00fatil pro formul\u00e1rio) */\n.card {\n  width: 320px;\n  background: #f9f9f9;\n  color: #18181b;\n  padding: 24px;\n  border-radius: 10px;\n  box-shadow: 0 10px 30px rgba(0,0,0,.25);\n}\n.card input,\n.card textarea,\n.card button {\n  width: 100%;\n  padding: 10px 12px;\n  border: 1px solid #d4d4d8;\n  border-radius: 8px;\n}\n.card textarea { resize: vertical; min-height: 96px; }\n.card button {\n  cursor: pointer;\n  border: none;\n  margin-top: 8px;\n  background: #111827;\n  color: #fff;\n  font-weight: 600;\n}\n\n.nav-link {\n  padding: 8px 16px;\n  border-radius: 6px;\n  background: #27272a;\n  color: #f4f4f5;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.nav-link:hover {\n  background: #3f3f46;\n}\n\n.nav-link.active {\n  background: #10b981;\n  color: white;\n}\n</code></pre> <ol> <li>Rodar</li> </ol> <pre><code>npm run dev\n</code></pre> <p>Acesse o <code>localhost:5173</code> e teste a navega\u00e7\u00e3o entre as p\u00e1ginas.</p>"},{"location":"aula_2/aula_2/#finalizacao","title":"Finaliza\u00e7\u00e3o","text":"<p>Bom, at\u00e9 aqui fizemos uma introdu\u00e7\u00e3o extremamente simples sobre o react e com montar duas p\u00e1ginas e navegar entre elas atrav\u00e9s de bot\u00f5es. Para as pr\u00f3ximas aulas vamos desenvolver um projeto um pouco mais robusto e interessante.</p> <p>Para deixar a trilha mais divertida e pr\u00e1tica, vamos implementar ao longo das aulas um app chamado Get-it, que funciona como um mural de post-its digitais. \u00c9 exatamente o mesmo app usado na mat\u00e9ria Tecnologias Web do 4\u00ba Semestre de Engenharia de Computa\u00e7\u00e3o. Nele, o usu\u00e1rio poder\u00e1:</p> <ul> <li> <p>Criar um novo post-it (com t\u00edtulo, conte\u00fado e uma tag).</p> </li> <li> <p>Editar post-its existentes.</p> </li> <li> <p>Deletar post-its.</p> </li> <li> <p>Visualizar todas as tags em uma p\u00e1gina <code>/tags</code>.</p> </li> <li> <p>Clicar em uma tag e ver somente os post-its daquela tag <code>/tags/:slug</code>.</p> </li> </ul> <p>Isso vai nos permitir explorar bem o React no front, e depois relacionar entidades no banco de dados (um <code>post-it</code> pertence a uma <code>tag</code> \u2192 rela\u00e7\u00e3o many-to-one).</p> <p>Abaixo coloco uma foto do app para voc\u00eas irem se familiarizando: </p>"},{"location":"aula_3/aula_3/","title":"Aula\u202f3","text":"<p>Na \u00faltima aula, preparamos o ambiente de desenvolvimento e criamos a estrutura b\u00e1sica do nosso projeto. Agora, vamos avan\u00e7ar para a implementa\u00e7\u00e3o da interface principal, os post-its.</p>"},{"location":"aula_3/aula_3/#objetivos","title":"Objetivos:","text":"<ol> <li>Reproduzir a interface b\u00e1sica mostrada na imagem (banner amarelo, formul\u00e1rio central e \u201cpost\u2011its\u201d coloridos).</li> <li> <p>Construir o caminho m\u00ednimo front\u202f\u2192\u202fback para:</p> </li> <li> <p><code>GET /api/notes</code> \u2013 listar post\u2011its existentes.</p> </li> <li><code>POST /api/notes</code> \u2013 criar um novo post\u2011it.</li> </ol>"},{"location":"aula_3/aula_3/#1-backend-minimo-flask","title":"1) Back\u2011end m\u00ednimo (Flask)","text":"<p>O primeiro passo \u00e9 criar o back\u2011end m\u00ednimo que atenda aos dois endpoints.</p> <p>J\u00e1 com a venv (<code>venv-back</code>) ativa.</p> <pre><code>cd backend\npip install flask flask-cors\n</code></pre> <p>Vamos criar um arquivo super simples somente para abrir o nosso back. Crie <code>backend/app.py</code>:</p> <pre><code>from flask import Flask, request, jsonify\nfrom flask_cors import CORS # seguran\u00e7a para n\u00e3o bloquear \n\napp = Flask(__name__) # Cria inst\u00e2ncia da aplica\u00e7\u00e3o\nCORS(app, origins=[\"http://localhost:5173\"]) # Autoriza apenas o origin do Vite\n\nnotes: list[dict] = []          # armazenamento em mem\u00f3ria\n\n@app.route(\"/\") #Definindo a rota raiz, ir\u00e1 parecer quando rodar o flask\ndef index():\n    return \"&lt;h2&gt;API Get-it rodando! Use /api/notes&lt;/h2&gt;\"\n\n@app.route(\"/api/notes\", methods=[\"GET\", \"POST\"]) # Definindo a rota /api/notes\ndef handle_notes():\n    if request.method == \"POST\":\n        data = request.get_json(force=True)\n        note = { # Aqui vai pegar os campos basicos de um post-it e montar list (parsing de entrada)\n            \"id\": len(notes) + 1,\n            \"title\": data.get(\"title\", \"\").strip(),\n            \"content\": data.get(\"content\", \"\").strip(),\n        }\n        notes.append(note)\n        return jsonify(note), 201               # 201 Created\n    return jsonify(notes)                       # Se for GET, retorna a lista de post-its\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>Por enquanto neste c\u00f3digo estamos rodando tudo localmente, sem banco de dados. Os post\u2011its ficam em mem\u00f3ria na lista <code>notes</code>. Leia com calma cada parte do c\u00f3digo para ver se consegue entender o que esta acontecendo.</p>"},{"location":"aula_3/aula_3/#abrindo-o-backend-e-testando-a-rota-raiz","title":"Abrindo o back\u2011end e testando a rota raiz","text":"<p>Com o primeiro arquivo pronto, vamos rodar o Flask:</p> <p>Rodar em um terminal separado:</p> <pre><code>python app.py          # Flask na porta 5000\n</code></pre> <p>Voc\u00ea deve ver algo como:</p> <p></p> <p>Voc\u00ea pode ver que o que est\u00e1 escrito ai \u00e9 exatamente o que escrevemos na fun\u00e7\u00e3o <code>index()</code>. </p>"},{"location":"aula_3/aula_3/#testando-o-endpoint-apinotes","title":"Testando o endpoint <code>/api/notes</code>","text":"<p>Agora, se voc\u00ea abrir o navegador em <code>http://localhost:5000/api/notes</code>, ver\u00e1 um array vazio (<code>[]</code>), que \u00e9 o conte\u00fado inicial da nossa lista <code>notes</code>.</p> <p></p>"},{"location":"aula_3/aula_3/#testando-o-post","title":"Testando o POST","text":"<p>Deixe o Flask rodando e abra outro terminal. Vamos usar um comando direto no terminal para testar o POST:</p> <pre><code># Windows PowerShell\nInvoke-WebRequest -Uri \"http://127.0.0.1:5000/api/notes\" `\n  -Method POST `\n  -Body '{\"title\":\"Hello\",\"content\":\"Primeiro post\u2011it\"}' `\n  -ContentType \"application/json\"\n\n# macOS/Linux\ncurl -X POST http://127.0.0.1:5000/api/notes \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Hello\",\"content\":\"Primeiro post\u2011it\"}'\n</code></pre> <p>Voc\u00ea dever\u00e1 ter a seguinte resposta no terminal: </p> <p>Podemos ver que o <code>StatusCode</code> \u00e9 <code>201</code>, que significa que o post\u2011it foi criado assim como definimos no <code>app.py</code>. Se voc\u00ea atualizar a p\u00e1gina do navegador em <code>http://localhost:5000/api/notes</code>, ver\u00e1 o post\u2011it que acabou de criar:</p> <p></p>"},{"location":"aula_3/aula_3/#2-frontend-react-vite","title":"2) Front\u2011end \u2013 React + Vite","text":"<p>Agora que temos o back\u2011end funcionando, vamos criar o front\u2011end igual ao da imagem do final da aula 2 que consome os dois endpoints.</p>"},{"location":"aula_3/aula_3/#21-retirar-todos-os-botoes-de-layoutjsx","title":"2.1)  Retirar todos os bot\u00f5es de <code>layout.jsx</code>","text":"<p>Antes, no arquivo de layout est\u00e1vamos colocando os bot\u00f5es de Home e Contact. Agora, como n\u00e3o teremos mais essas p\u00e1ginas, podemos retirar esses bot\u00f5es. E deixar somente o <code>&lt;Outlet /&gt;</code> que \u00e9 onde o conte\u00fado da p\u00e1gina vai ser renderizado. </p> <p>Al\u00e9m disso, j\u00e1 vamos importar um arquivo CSS que montaremos a seguir para deixar a p\u00e1gina com a cara de post\u2011it.</p> <p>Ele deve ficar assim:</p> <pre><code>import { Outlet } from \"react-router-dom\";\nimport \"../getit.css\";\n\nexport default function Layout() {\n    return (\n        &lt;div&gt;\n            &lt;main&gt;\n                &lt;Outlet /&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>Esse jeito que estamos fazendo, de importar tudo no <code>layout.jsx</code>, \u00e9 uma outra forma de fazer com que tenha alguns componentes em todas as p\u00e1ginas. </p> <p>A pr\u00e1tica mais comum \u00e9 criar componentes e importar eles sempre na p\u00e1gina que estamos construindo.</p>"},{"location":"aula_3/aula_3/#22-homejsx","title":"2.2)  <code>Home.jsx</code>","text":""},{"location":"aula_3/aula_3/#onde-estavamos-antes","title":"Onde est\u00e1vamos antes","text":"<p>Na Aula 2, a p\u00e1gina <code>Home.jsx</code> era s\u00f3 um teste, com um texto simples:</p> <pre><code>// src/pages/Home.jsx\nexport default function Home() {\n  return &lt;h1&gt;Home&lt;/h1&gt;;\n}\n</code></pre> <p>Ou seja: a rota <code>/</code> apenas mostrava a palavra Home no navegador. Agora vamos transform\u00e1-la no mural de post-its da aplica\u00e7\u00e3o.</p>"},{"location":"aula_3/aula_3/#imports-necessarios","title":"Imports necess\u00e1rios","text":"<p>Primeiro, vamos importar duas coisas do React e tamb\u00e9m o CSS que j\u00e1 preparamos:</p> <pre><code>import { useEffect, useState } from \"react\";\nimport \"../getit.css\";\n</code></pre> <ul> <li><code>useState</code> \u2192 cria vari\u00e1veis de estado (para guardar dados na mem\u00f3ria do navegador).</li> <li><code>useEffect</code> \u2192 executa um c\u00f3digo automaticamente quando o componente \u00e9 carregado.</li> <li><code>../getit.css</code> \u2192 importa nosso estilo pronto, para que os elementos tenham a cara dos post-its.</li> </ul> <p>Para entender melhor o que s\u00e3o <code>useState</code> e <code>useEffect</code>, veja a documenta\u00e7\u00e3o oficial: useEffect ;  useState.</p>"},{"location":"aula_3/aula_3/#estados-iniciais","title":"Estados iniciais","text":"<p>Depois declaramos os estados que a p\u00e1gina precisa:</p> <pre><code>const [notes, setNotes] = useState([]);\nconst [title, setTitle] = useState(\"\");\nconst [content, setContent] = useState(\"\");\nconst [tag, setTag] = useState(\"\");\n</code></pre> <p>O que significa cada linha:</p> <ul> <li> <p><code>notes</code> \u2192 guarda a lista de post-its carregados do back-end.</p> </li> <li> <p><code>setNotes</code> \u2192 \u00e9 a fun\u00e7\u00e3o que permite atualizar essa lista (por exemplo, quando criamos um novo post-it).</p> </li> <li> <p><code>title</code> \u2192 guarda o texto digitado no campo de t\u00edtulo do formul\u00e1rio.</p> </li> <li> <p><code>setTitle</code> \u2192 altera o valor de <code>title</code> sempre que o usu\u00e1rio digita algo no input.</p> </li> <li> <p><code>content</code> \u2192 guarda o corpo do post-it.</p> </li> <li> <p><code>setContent</code> \u2192 atualiza esse conte\u00fado conforme o usu\u00e1rio digita no textarea.</p> </li> <li> <p><code>tag</code> \u2192 guarda a tag opcional da nota.</p> </li> <li> <p><code>setTag</code> \u2192 altera o valor dessa tag.</p> </li> </ul> <p>Por que precisamos do <code>setX</code>? Em React, n\u00e3o podemos mudar os estados diretamente (ex: <code>title = \"novo valor\"</code>). O React controla quando deve redesenhar a tela, e isso s\u00f3 acontece se usamos a fun\u00e7\u00e3o <code>setX</code>. Assim, sempre que chamamos <code>setNotes</code>, <code>setTitle</code>, etc., o React sabe que precisa re-renderizar o componente para mostrar os novos valores na tela.</p>"},{"location":"aula_3/aula_3/#buscar-dados-no-carregamento","title":"Buscar dados no carregamento","text":"<p>Queremos que, quando a p\u00e1gina abrir, o React busque as notas no back-end (<code>http://localhost:5000/api/notes</code>). Isso \u00e9 feito dentro de um useEffect:</p> <pre><code>useEffect(() =&gt; {\n  fetch(\"http://localhost:5000/api/notes\")\n    .then((r) =&gt; r.json())\n    .then(setNotes);\n}, []);\n</code></pre> <ul> <li>O <code>[]</code> no final significa \u201crode apenas uma vez, quando a p\u00e1gina carregar\u201d.</li> <li><code>fetch(...)</code> \u2192 faz a requisi\u00e7\u00e3o HTTP para o Flask.</li> <li><code>.then(setNotes)</code> \u2192 salva o resultado no estado <code>notes</code>.</li> </ul>"},{"location":"aula_3/aula_3/#funcao-de-criacao-de-notas","title":"Fun\u00e7\u00e3o de cria\u00e7\u00e3o de notas","text":"<p>Quando o usu\u00e1rio preencher o formul\u00e1rio e clicar em Criar, precisamos enviar a nota ao back-end. Para isso, criamos a fun\u00e7\u00e3o <code>handleSubmit</code>:</p> <pre><code>function handleSubmit(e) {\n  e.preventDefault();\n  fetch(\"http://localhost:5000/api/notes\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ title, content, tag }),\n  })\n    .then((r) =&gt; r.json())\n    .then((newNote) =&gt; {\n      setNotes([...notes, newNote]); // adiciona na lista\n\n      setTitle(\"\");                  // limpa o formul\u00e1rio\n      setContent(\"\");\n      setTag(\"\");\n    });\n}\n</code></pre> <ul> <li><code>e.preventDefault()</code> \u2192 evita que a p\u00e1gina recarregue.</li> <li><code>method: \"POST\"</code> \u2192 cria a nota.</li> <li><code>body: JSON.stringify(...)</code> \u2192 envia os dados no formato JSON.</li> <li>Ao receber a resposta, atualizamos a lista local e limpamos os campos.</li> </ul>"},{"location":"aula_3/aula_3/#estrutura-do-retorno-jsx","title":"Estrutura do retorno (JSX)","text":"<p>Depois de definir estados e fun\u00e7\u00f5es, precisamos dizer o que aparece na tela. No React, isso \u00e9 feito no <code>return</code>, onde escrevemos JSX \u2014 que parece HTML, mas tem algumas diferen\u00e7as (como <code>className</code> no lugar de <code>class</code>). Esses campos estamos colocando nomes para que o CSS j\u00e1 estilize corretamente. Mas s\u00e3o nomes que voc\u00ea pode mudar se quiser.</p> <pre><code>return (\n  &lt;&gt;\n    &lt;div className=\"appbar\"&gt;\n      &lt;img src=\"/logo-getit.png\" className=\"logo\" alt=\"logo\" /&gt;\n      &lt;p className=\"subtitle\"&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;main className=\"container\"&gt;\n      &lt;form className=\"form-card\" onSubmit={handleSubmit}&gt;\n        &lt;input\n          className=\"form-card-title\"\n          placeholder=\"T\u00edtulo\"\n          value={title}\n          onChange={(e) =&gt; setTitle(e.target.value)}\n        /&gt;\n        &lt;textarea\n          className=\"autoresize\"\n          placeholder=\"Digite o conte\u00fado...\"\n          value={content}\n          onChange={(e) =&gt; setContent(e.target.value)}\n        /&gt;\n        &lt;input\n          className=\"form-card-tag\"\n          placeholder=\"Tag (opcional)\"\n          value={tag}\n          onChange={(e) =&gt; setTag(e.target.value)}\n        /&gt;\n        &lt;button className=\"btn-criar\"&gt;Criar&lt;/button&gt;\n      &lt;/form&gt;\n\n      &lt;ul className=\"card-container\"&gt;\n        {notes.map((note) =&gt; (\n          &lt;div className=\"card\" key={note.id}&gt;\n            &lt;h3 className=\"card-title\"&gt;{note.title}&lt;/h3&gt;\n            &lt;div className=\"card-content\"&gt;\n              &lt;p&gt;{note.content}&lt;/p&gt;\n              {note.tag &amp;&amp; &lt;p className=\"card-tag\"&gt;#{note.tag}&lt;/p&gt;}\n            &lt;/div&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/main&gt;\n  &lt;/&gt;\n);\n</code></pre>"},{"location":"aula_3/aula_3/#linha-por-linha","title":"Linha por linha","text":""},{"location":"aula_3/aula_3/#cabecalho-appbar","title":"\ud83d\udd39 Cabe\u00e7alho (<code>appbar</code>)","text":"<pre><code>&lt;div className=\"appbar\"&gt;\n  &lt;img src=\"/logo-getit.png\" className=\"logo\" alt=\"logo\" /&gt;\n  &lt;p className=\"subtitle\"&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>O bloco de cima \u00e9 a barra amarela do app.</li> <li>Usa classes do nosso CSS (<code>appbar</code>, <code>logo</code>, <code>subtitle</code>).</li> <li>\u00c9 fixo, n\u00e3o depende de dados.</li> </ul>"},{"location":"aula_3/aula_3/#formulario-form-card","title":"\ud83d\udd39 Formul\u00e1rio (<code>form-card</code>)","text":"<pre><code>&lt;form className=\"form-card\" onSubmit={handleSubmit}&gt;\n</code></pre> <ul> <li>Representa o cart\u00e3o branco central onde o usu\u00e1rio digita a nota.</li> <li>Usa <code>onSubmit={handleSubmit}</code> para chamar a fun\u00e7\u00e3o de cria\u00e7\u00e3o quando clicamos em Criar.</li> </ul>"},{"location":"aula_3/aula_3/#inputs-controlados","title":"\ud83d\udd39 Inputs controlados","text":"<pre><code>&lt;input\n  className=\"form-card-title\"\n  placeholder=\"T\u00edtulo\"\n  value={title}\n  onChange={(e) =&gt; setTitle(e.target.value)}\n/&gt;\n</code></pre> <ul> <li>Esse campo est\u00e1 ligado ao estado <code>title</code>.</li> <li>O valor vem de <code>title</code>.</li> <li>Sempre que o usu\u00e1rio digita, o <code>onChange</code> atualiza o estado com <code>setTitle(e.target.value)</code>.</li> <li>Isso se chama componente controlado \u2192 o React \u00e9 quem manda no valor do input.</li> </ul> <p>O mesmo acontece para:</p> <ul> <li>Textarea \u2192 ligado a <code>content</code> e <code>setContent</code>.</li> <li>Input de tag \u2192 ligado a <code>tag</code> e <code>setTag</code>.</li> </ul>"},{"location":"aula_3/aula_3/#botao-criar","title":"\ud83d\udd39 Bot\u00e3o Criar","text":"<pre><code>&lt;button className=\"btn-criar\"&gt;Criar&lt;/button&gt;\n</code></pre> <ul> <li>Dispara o <code>onSubmit</code> do formul\u00e1rio.</li> <li>Ganha estilo do CSS (<code>btn-criar</code> \u2192 bot\u00e3o amarelo).</li> </ul>"},{"location":"aula_3/aula_3/#lista-de-notas-card-container","title":"\ud83d\udd39 Lista de notas (<code>card-container</code>)","text":"<pre><code>&lt;ul className=\"card-container\"&gt;\n  {notes.map((note) =&gt; (\n    &lt;div className=\"card\" key={note.id}&gt;\n      &lt;h3 className=\"card-title\"&gt;{note.title}&lt;/h3&gt;\n      &lt;div className=\"card-content\"&gt;\n        &lt;p&gt;{note.content}&lt;/p&gt;\n        {note.tag &amp;&amp; &lt;p className=\"card-tag\"&gt;#{note.tag}&lt;/p&gt;}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  ))}\n&lt;/ul&gt;\n</code></pre> <ul> <li>Aqui mostramos todos os post-its que vieram do back-end.</li> <li>Usamos <code>.map()</code> para percorrer o array <code>notes</code>.</li> <li> <p>Para cada nota:</p> </li> <li> <p>Criamos um <code>&lt;div className=\"card\"&gt;</code> com t\u00edtulo (<code>note.title</code>),</p> </li> <li>Conte\u00fado (<code>note.content</code>),</li> <li>E a tag (se existir).</li> </ul> <p>Repare:</p> <ol> <li><code>key={note.id}</code> \u2192 O React exige uma chave \u00fanica em listas, para saber diferenciar os elementos.</li> <li><code>{note.tag &amp;&amp; ...}</code> \u2192 Isso significa \u201cs\u00f3 mostre a tag se ela existir\u201d. \u00c9 um if curto em JSX.</li> </ol>"},{"location":"aula_3/aula_3/#codigo-completo-final","title":"C\u00f3digo completo final","text":"<p>Juntando tudo:</p> <pre><code>// src/pages/Home.jsx\nimport { useEffect, useState } from \"react\";\nimport \"../getit.css\";\n\nexport default function Home() {\n  const [notes, setNotes] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [tag, setTag] = useState(\"\");\n\n  useEffect(() =&gt; {\n    fetch(\"http://localhost:5000/api/notes\")\n      .then((r) =&gt; r.json())\n      .then(setNotes);\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    fetch(\"http://localhost:5000/api/notes\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ title, content, tag }),\n    })\n      .then((r) =&gt; r.json())\n      .then((newNote) =&gt; {\n        setNotes([...notes, newNote]);\n        setTitle(\"\");\n        setContent(\"\");\n        setTag(\"\");\n      });\n  }\n\n  return (\n    &lt;&gt;\n      &lt;div className=\"appbar\"&gt;\n        &lt;img src=\"/logo-getit.png\" className=\"logo\" alt=\"logo\" /&gt;\n        &lt;p className=\"subtitle\"&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;main className=\"container\"&gt;\n        &lt;form className=\"form-card\" onSubmit={handleSubmit}&gt;\n          &lt;input\n            className=\"form-card-title\"\n            placeholder=\"T\u00edtulo\"\n            value={title}\n            onChange={(e) =&gt; setTitle(e.target.value)}\n          /&gt;\n          &lt;textarea\n            className=\"autoresize\"\n            placeholder=\"Digite o conte\u00fado...\"\n            value={content}\n            onChange={(e) =&gt; setContent(e.target.value)}\n          /&gt;\n          &lt;input\n            className=\"form-card-tag\"\n            placeholder=\"Tag (opcional)\"\n            value={tag}\n            onChange={(e) =&gt; setTag(e.target.value)}\n          /&gt;\n          &lt;button className=\"btn-criar\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n\n        &lt;ul className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;div className=\"card\" key={note.id}&gt;\n              &lt;h3 className=\"card-title\"&gt;{note.title}&lt;/h3&gt;\n              &lt;div className=\"card-content\"&gt;\n                &lt;p&gt;{note.content}&lt;/p&gt;\n                {note.tag &amp;&amp; &lt;p className=\"card-tag\"&gt;#{note.tag}&lt;/p&gt;}\n              &lt;/div&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/ul&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"aula_3/aula_3/#3-estilizacao-e-logo","title":"3) Estiliza\u00e7\u00e3o e logo","text":"<p>Agora crie o arquivo CSS que dar\u00e1 a cara de post\u2011it ao app com o nome <code>src/getit.css</code>.</p> <pre><code>/*\nAlgumas informa\u00e7\u00f5es \u00fateis e dicas:\n  - Fontes dispon\u00edveis:\n    font-family: 'Roboto', sans-serif;\n    font-family: 'Permanent Marker', cursive;\n  - Cores:\n    Tons de amarelo:\n      #e4fc2b\n      #e0d426\n      #f7d736\n      #e0af26\n      #fcb02b\n    Tons de cinza:\n      #2c2c2c\n      #4c4c4c\n    Cores dos cards:\n      #ead3a7\n      #9de0f5\n      #ef89ba\n      #fae890\n      #abe9c1\n  - Sombra: https://codepen.io/sdthornton/pen/wBZdXq\n */\n\nhtml,\nbody {\n    font-family: \"Roboto\", sans-serif;\n}\n\n/* Voc\u00ea pode usar o CSS comentado abaixo, se ajudar */\n/* Fonte: https://codepen.io/CrisWoler/pen/ogXBLj */\n\n.logo{\n    width: 6%;\n    padding: .6%;\n    justify-content: flex-start;\n}\n\n.appbar{\n    background-color: #f7d736;\n    display: flex;\n    align-items: center;\n    margin-bottom: 0;\n    box-shadow: 0px 10px 6px rgba(0, 0, 0, 0.3);\n\n}\n\n.main{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.btn {\n    position: relative;\n    display: block;\n    padding: 10px 15px;\n\n    overflow: hidden;\n\n    border-width: 0;\n    outline: none;\n    border-radius: 2px;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);\n\n    background-color: #f7d736;\n    text-decoration-color: black;\n    transition: background-color 0.3s;\n}\n\n.btn &gt; * {\n    position: relative;\n}\n\n.btn:before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    display: block;\n    width: 0;\n    padding-top: 0;\n    border-radius: 100%;\n    background-color: rgba(236, 240, 241, 0.3);\n    -webkit-transform: translate(-50%, -50%);\n    -moz-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    -o-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.btn:active:before {\n    width: 120%;\n    padding-top: 120%;\n    transition: width 0.2s ease-out, padding-top 0.2s ease-out;\n} \n\nbody, html {\n    height: 100%;\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.form-card {\n    position: relative;\n    display: flex;\n    overflow: hidden;\n    border-width: 0;\n    flex-direction: column;\n    align-items: center;\n    width: 26%;\n    margin-top: 2%;\n    margin-left: 30%;\n    margin-right: 30%;\n    padding: 14px;\n    background-color: white;\n    border-radius: 10px;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.441);\n}\n\n.form-card-title {\n    width: 100%;\n    margin-bottom: 15px;\n    padding: 10px;\n    font-size: 20px;\n    border: none;\n    border-radius: 5px;\n    font-family: 'Roboto', sans-serif;\n    font-weight: bold;\n}\n\n.autoresize{\n    font-family: 'Roboto', sans-serif;\n    font-size: 15px;\n    width: 100%;\n    margin-bottom: 15px;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n}\n\n.form-card-tag{\n    font-family: 'Roboto', sans-serif;\n    font-size: 15px;\n    width: 100%;\n    margin-bottom: 15px;\n    padding: 10px;\n    border: none;\n    border-radius: 5px;\n}\n\n.btn-criar {\n    padding: 10px 20px;\n    font-size: 16px;\n    color: black;\n    background-color: #f7d736;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    width: 100%;\n}\n\n.btn-tags {\n    padding: 10px 5px;\n    font-size: 16px;\n    color: black;\n    background-color: #f7d736;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    width: 100%;\n    text-align: center;\n    text-decoration: none;\n    margin-top: 5%;\n}\n\n.btn:hover {\n    background-color: #a1b300;\n}\n\n.card-container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin-top: 30px;\n}\n\n.card {\n    display: flex;\n    flex-direction: column;\n    width: 200px;\n    background-color: #fff;\n    margin: 10px;\n    padding: 15px;\n    border-radius: 10px;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n    text-align: left;\n    font-family: 'Permanent Marker', cursive;\n}\n\n.card-tag {\n    font-style: italic;\n    color: black; /* Cor do texto */\n    background-color: #f7d736; /* Amarelo */\n    border-radius: 5px; \n    font-weight: bold;\n    width:fit-content;\n    padding-left: 5%;\n    padding-right: 5%;\n}\n\n.card-tag-link{\n    text-decoration: none;\n    color: black;\n\n}\n\n.card-content{\n    color: #4c4c4c;\n    padding-top: 10%;\n    text-align: center;\n}\n\n.card-color-1{\n    background-color:#ead3a7 ;\n}\n.card-color-2{\n    background-color: #9de0f5 ;\n}\n.card-color-3{\n    background-color:#ef89ba ;\n}\n.card-color-4{\n    background-color:#fae890 ;\n}\n.card-color-5{\n    background-color:#abe9c1 ;\n}\n.card-rotation-1{\n    transform: rotate(1deg)\n}\n.card-rotation-2{\n    transform: rotate(2deg)\n}\n.card-rotation-3{\n    transform: rotate(3deg)\n}\n.card-rotation-4{\n    transform: rotate(4deg)\n}\n.card-rotation-5{\n    transform: rotate(-2deg)\n}\n.card-rotation-6{\n    transform: rotate(-1deg)\n}\n.card-rotation-7{\n    transform: rotate(-4deg)\n}\n.card-rotation-8{\n    transform: rotate(6deg)\n}\n.card-rotation-9{\n    transform: rotate(7deg)\n}\n.card-rotation-10{\n    transform: rotate(4deg)\n}\n.a {\n    width:30px;\n}\n\n.card-title {\n    font-size: 18px;\n    margin-bottom: 10px;\n}\n\n.card-content {\n    font-size: 14px;\n}\n\n.botoes{\n    display: flex;\n    flex-direction: row-reverse;\n}\n\n.lixeira{\n    text-decoration: none;\n}\n\n.edit{\n    text-decoration: none;\n}\n</code></pre>"},{"location":"aula_3/aula_3/#logo","title":"Logo","text":"<p>Adicione esta foto com o nome <code>logo-getit.png</code> para a logo do app: </p>"},{"location":"aula_3/aula_3/#4-ajustando-as-rotas-para-exibir-a-home","title":"4) Ajustando as rotas para exibir a Home","text":"<p>At\u00e9 agora criamos a p\u00e1gina <code>Home.jsx</code>, mas se n\u00e3o conectarmos ela no roteador, o navegador n\u00e3o vai saber qual componente mostrar.</p>"},{"location":"aula_3/aula_3/#1-routesjsx","title":"1. <code>routes.jsx</code>","text":"<p>Agora precisamos ligar a URL <code>/</code> com a p\u00e1gina <code>Home.jsx</code>.</p> <pre><code>// src/app/routes.jsx\nimport { createBrowserRouter } from \"react-router-dom\";\nimport Layout from \"./layout\";\nimport Home from \"../pages/Home\";\n\nexport const router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;Layout /&gt;,\n    children: [\n      { path: \"/\", element: &lt;Home /&gt; },   // aqui chamamos a Home\n    ],\n  },\n]);\n</code></pre> <p>Explicando:</p> <ul> <li>Importamos <code>Home</code> (a p\u00e1gina que montamos agora).</li> <li>Dentro do array de <code>children</code>, adicionamos a rota <code>{ path: \"/\", element: &lt;Home /&gt; }</code>.</li> <li>Isso significa: quando o usu\u00e1rio abrir <code>http://localhost:5173/</code>, o React Router vai mostrar o conte\u00fado de <code>Home</code> dentro do <code>Outlet</code> do <code>Layout</code>.</li> </ul>"},{"location":"aula_3/aula_3/#5-acabamos","title":"5) Acabamos!?","text":"<p>Vamos somente o front para ver se est\u00e1 tudo de acordo.</p> <p>Em um terminal:</p> <pre><code>cd frontend\nnpm run dev\n</code></pre> <p>U\u00e9, temos algum erro. N\u00e3o? A p\u00e1gina n\u00e3o est\u00e1 exatamente com a cara que quer\u00edamos. De cara podemos notar dois problemas:</p> <ol> <li>O fundo da tela est\u00e1 preto e deveria estar branco.</li> <li>A escrita \"Como o Post-it, mas com outro verbo\" est\u00e1 em branco mas deveria estar em preto.</li> </ol> <p>Para resolver o primeiro problema, pense, mexemos em todos os arquivos necess\u00e1rios? </p> <p>Voc\u00ea j\u00e1 deve imaginar que a resposta \u00e9: n\u00e3o. Esquecemos de um arquivo que tamb\u00e9m esta dentro do nosso fluxo, o arquivo <code>main.jsx</code>.</p> <p>Entrando nele percebemos que n\u00e3o importamos o CSS que criamos. Vamos importar ele l\u00e1.</p> <p>Troque <code>import \"./index.css\";</code> por <code>import \"../getit.css\";</code>.</p> <p>Pronto! Foi melhor do que pens\u00e1vamos. Resolvemos os dois problemas de uma vez s\u00f3. Agora sua p\u00e1gina deve estar assim:</p> <p></p> <p>AGORA SIM! Estamos prontos para rodar tudo.</p>"},{"location":"aula_3/aula_3/#6-vamos-agora-rodar-os-dois-juntos","title":"6) Vamos agora rodar os dois juntos","text":"<p>Em terminal\u202f1:</p> <pre><code>cd backend\npython app.py\n</code></pre> <p>Em terminal\u202f2:</p> <pre><code>cd frontend\nnpm run dev                 # http://localhost:5173\n</code></pre> <p>Abra o navegador em <code>localhost:5173</code>, crie alguns post\u2011its\u2026 e veja surgirem!</p>"},{"location":"aula_3/aula_3/#7-esquecemos-de-mais-uma-coisa","title":"7) Esquecemos de mais uma coisa","text":"<p>Voc\u00eas devem ter percebido que quando criamos os post-its eles est\u00e3o com a mesma cor. Vamos resolver isso no <code>home.jsx</code>.</p> <p>O que est\u00e1 acontecendo \u00e9 que estamos renderizando todos os post-its com a mesma classe <code>card</code>.</p> <p>A ideia para corrigir isso \u00e9 criar uma fun\u00e7\u00e3o que retorne uma cor diferente para cada post-it. Como temos 5 cores, podemos usar o n\u00famero de post-its para definir a cor.</p> <p>Vamos trocar todo o <code>&lt;ul className=\"card-container\"&gt;</code> por:</p> <pre><code>&lt;ul className=\"card-container\"&gt;\n  {notes.map((note, i) =&gt; {\n    const colorClass = `card-color-${(i % 5) + 1}`;\n    return (\n      &lt;div className={`card ${colorClass}`} key={note.id}&gt;\n        &lt;h3 className=\"card-title\"&gt;{note.title}&lt;/h3&gt;\n        &lt;div className=\"card-content\"&gt;\n          &lt;p&gt;{note.content}&lt;/p&gt;\n          {note.tag &amp;&amp; &lt;p className=\"card-tag\"&gt;#{note.tag}&lt;/p&gt;}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  })}\n&lt;/ul&gt;\n</code></pre>"},{"location":"aula_3/aula_3/#8-vamos-entender-o-que-esta-acontecendo","title":"8) Vamos entender o que est\u00e1 acontecendo","text":"<p>Agora que conseguimos adicionar alguns post-its, precisamos entender o que est\u00e1 acontecendo em cada p\u00e1gina. </p> <p>No nosso front, em <code>localhost:5173</code>, temos nossos post-its com a fun\u00e7\u00e3o de criar novos post-its funcionando. Voc\u00ea deve ter notado que a funcionalidade de Tags, mesmo se inserida no formul\u00e1rio, n\u00e3o aparece na tela. Isso acontece pois no nosso back-end, em <code>app.py</code>, s\u00f3 criamos os campos <code>id</code>, <code>title</code> e <code>content</code>. Iremos arrumar isso depois.</p> <p>Para visualizarmos os post-its que criamos, precisamos olhar o terminal onde o Flask est\u00e1 rodando. L\u00e1 podemos ver os logs de requisi\u00e7\u00f5es que est\u00e3o sendo feitas e se entrarmos em <code>http://127.0.0.1:5000</code> no navegador, podemos ver os post-its que criamos em formato JSON.</p> <p>Ent\u00e3o podemos concluir que o front est\u00e1 se comunicando com o back, e o back est\u00e1 armazenando os post-its em mem\u00f3ria!</p>"},{"location":"aula_3/aula_3/#9-deletando-post-its","title":"9) Deletando Post-its","text":"<p>At\u00e9 agora nossa p\u00e1gina Home.jsx j\u00e1 permite criar post-its e list\u00e1-los na tela. Agora vamos dar o pr\u00f3ximo passo: deletar uma nota existente.</p>"},{"location":"aula_3/aula_3/#como-sera-nosso-fluxo","title":"Como ser\u00e1 nosso fluxo?","text":"<ol> <li>Criar uma fun\u00e7\u00e3o para deletar uma nota. Essa fun\u00e7\u00e3o dever\u00e1 enviar uma requisi\u00e7\u00e3o DELETE para o back-end. </li> <li>Mostrar um bot\u00e3o para deletar cada post-it. Quando o usu\u00e1rio clicar, nesse bot\u00e3o, chamaremos a fun\u00e7\u00e3o de deletar. </li> <li>Atualizar a lista local (<code>notes</code>) para remover o item da tela.</li> </ol>"},{"location":"aula_3/aula_3/#alterando-o-front-end","title":"Alterando o front-end","text":""},{"location":"aula_3/aula_3/#criando-a-funcao-handledelete","title":"Criando a fun\u00e7\u00e3o <code>handleDelete</code>","text":"<p>Dentro de Home.jsx, logo ap\u00f3s a fun\u00e7\u00e3o <code>handleSubmit</code>, adicione:</p> <pre><code>function handleDelete(id) {\n  fetch(`http://localhost:5000/api/notes/${id}`, {\n    method: \"DELETE\",\n  }).then(() =&gt; {\n    // remove da lista local\n    setNotes(notes.filter((n) =&gt; n.id !== id));\n  });\n}\n</code></pre> <ul> <li>Fazemos um <code>fetch</code> com <code>method: \"DELETE\"</code>.</li> <li>Se o back-end confirmar, usamos <code>setNotes</code> para atualizar a lista, sem precisar recarregar a p\u00e1gina.</li> <li>O m\u00e9todo <code>.filter()</code> do JavaScript cria um novo array apenas com os elementos que satisfazem a condi\u00e7\u00e3o passada, ou seja, todos os post-its cujo <code>id</code> \u00e9 diferente do que foi deletado.</li> </ul>"},{"location":"aula_3/aula_3/#adicionando-o-botao-de-lixeira","title":"Adicionando o bot\u00e3o de lixeira","text":"<p>Dentro do <code>return</code> que renderiza os cards,  vamos adicionar um <code>&lt;a href/&gt;</code> com o o bot\u00e3o da lixeira ja incluindo a fun\u00e7\u00e3o de deletar que criamos acima:</p> <pre><code>&lt;a href=\"#\" className=\"lixeira\" onClick={(e) =&gt; { e.preventDefault(); handleDelete(note.id); }}&gt;\ud83d\uddd1\ufe0f&lt;/a&gt;\n</code></pre> <ul> <li>Usamos a classe <code>lixeira</code> que j\u00e1 existe no CSS.</li> <li>O evento <code>onClick={() =&gt; handleDelete(note.id)}</code> chama a fun\u00e7\u00e3o de exclus\u00e3o passando o id da nota.</li> </ul>"},{"location":"aula_3/aula_3/#alterando-o-back-end-para-suportar-delete","title":"Alterando o back-end para suportar DELETE","text":"<p>No app.py, adicionamos a rota DELETE:</p> <pre><code>@app.route(\"/api/notes/&lt;int:note_id&gt;\", methods=[\"DELETE\"])\ndef delete_note(note_id):\n    global notes\n    notes = [n for n in notes if n[\"id\"] != note_id]\n    return \"\", 204\n</code></pre> <ul> <li>Recebe o <code>note_id</code> da URL.</li> <li>Remove a nota correspondente da lista <code>notes</code>.</li> <li>Retorna <code>204</code> (No Content), indicando que a exclus\u00e3o foi bem-sucedida.</li> </ul> <p>Agora, teste!</p>"},{"location":"aula_3/aula_3/#10-conclusao","title":"10) Conclus\u00e3o","text":"<p>Pronto! Agora j\u00e1 temos um CRUD parcial: Create e Delete. Na pr\u00f3xima aula, vamos implementar o Editar (Update) e explorar a p\u00e1gina de edi\u00e7\u00e3o.</p>"},{"location":"aula_4/aula_4/","title":"Aula 4","text":"<p>At\u00e9 a aula passada, est\u00e1vamos guardando os post-its apenas em mem\u00f3ria, dentro de uma lista Python (<code>notes</code>) algo extremamente simples. Agora \u00e9 hora de usar um banco de dados de verdade para que os dados fiquem persistentes, ou seja, n\u00e3o desapare\u00e7am quando o servidor reiniciar.</p>"},{"location":"aula_4/aula_4/#objetivos","title":"Objetivos","text":"<p>Os nossos objetivos nesta aula est\u00e3o centralizados em implementar toda a estrutura necess\u00e1ria para usar um banco de dados PostgreSQL com Flask, e tamb\u00e9m adicionar mais uma funcionalidade, a de Editar um post-it j\u00e1 existente.</p> <ol> <li>Instalar e configurar PostgreSQL e pgAdmin.</li> <li>Conectar o back-end Flask ao banco SQLAlchemy (ORM \u2014 mapear tabelas em classes Python).</li> <li>Criar tabela e migrar os endpoints (<code>GET</code>, <code>POST</code>, <code>DELETE</code>).</li> <li>Implementar o Editar (Update) com rota <code>PUT /api/notes/&lt;id&gt;</code>.</li> <li>Criar a p\u00e1gina de edi\u00e7\u00e3o no front-end (<code>EditNote.jsx</code>).</li> </ol>"},{"location":"aula_4/aula_4/#1-instalando-postgresql-pgadmin","title":"1) Instalando PostgreSQL + pgAdmin","text":"<p>At\u00e9 agora trabalhamos com dados em mem\u00f3ria (lista Python), mas isso n\u00e3o \u00e9 suficiente para uma aplica\u00e7\u00e3o real. Por isso, vamos usar o PostgreSQL, um dos bancos de dados relacionais mais usados no mundo.</p> <p>Mas al\u00e9m do servidor PostgreSQL (onde os dados ficam armazenados de fato), tamb\u00e9m vamos instalar o pgAdmin.</p>"},{"location":"aula_4/aula_4/#o-que-e-o-pgadmin","title":"O que \u00e9 o pgAdmin?","text":"<p>O pgAdmin \u00e9 uma ferramenta gr\u00e1fica oficial para gerenciar o PostgreSQL. Ele funciona como um painel de controle visual para o banco de dados:</p> <ul> <li>Permite criar bancos e tabelas sem precisar decorar comandos SQL.</li> <li>Facilita a execu\u00e7\u00e3o de queries (SELECT, INSERT, UPDATE, DELETE) com um editor embutido.</li> <li>Exibe os dados em tabelas visuais, o que ajuda a entender melhor o que est\u00e1 acontecendo.</li> <li>Permite monitorar conex\u00f5es e desempenho.</li> </ul> <p>O pgAdmin n\u00e3o \u00e9 a \u00fanica forma de gerenciar PostgreSQL. Alguns exemplos populares:</p> <ul> <li>psql \u2192 Cliente oficial em linha de comando. Vem instalado junto com o PostgreSQL.</li> <li>DBeaver \u2192 Ferramenta gr\u00e1fica universal (funciona com PostgreSQL, MySQL, Oracle, SQLite e muitos outros).</li> <li>TablePlus \u2192 Interface paga (mas tem vers\u00e3o gratuita limitada), bem moderna e leve.</li> <li>DataGrip \u2192 IDE profissional da JetBrains, suporta v\u00e1rios bancos (PostgreSQL, MySQL, MongoDB etc.).</li> <li>HeidiSQL / Beekeeper Studio \u2192 Outras op\u00e7\u00f5es conhecidas para gerenciar bancos SQL.</li> </ul> <p>Aqui vamos usar o pgAdmin porque \u00e9 gratuito, oficial e suficiente para o nosso projeto. Mas em projetos profissionais voc\u00ea pode acabar usando DBeaver ou DataGrip, que s\u00e3o mais completos.</p>"},{"location":"aula_4/aula_4/#windows","title":"Windows","text":"<p>Baixe o instalador em https://www.pgadmin.org/ </p> <p>E aqui tem um v\u00eddeo da pr\u00f3pria mat\u00e9ria de TecWeb mostrando o passo a passo.</p> <p>Crie com a senha <code>admin</code> (anote essa senha, voc\u00ea vai precisar dela para entrar no pgAdmin).</p>"},{"location":"aula_4/aula_4/#macos","title":"macOS","text":"<pre><code>brew install postgresql\nbrew services start postgresql\n</code></pre>"},{"location":"aula_4/aula_4/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt update\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"aula_4/aula_4/#2-criando-banco","title":"2) Criando banco","text":""},{"location":"aula_4/aula_4/#21-abra-o-pgadmin","title":"2.1 Abra o pgAdmin","text":""},{"location":"aula_4/aula_4/#22-clique-com-botao-direito-em-databases-create-database","title":"2.2 Clique com bot\u00e3o direito em Databases \u2192 Create \u2192 Database.","text":"<p>Nome: trilha_db</p> <p>Dono: postgres.</p> <p>Salvar.</p> <p>Importante: nesta abordagem n\u00e3o precisamos criar tabelas manualmente. As tabelas ser\u00e3o geradas automaticamente a partir dos modelos Python usando migrations.</p>"},{"location":"aula_4/aula_4/#3-configurando-o-back-end-com-sqlalchemy","title":"3) Configurando o back-end com SQLAlchemy","text":""},{"location":"aula_4/aula_4/#31-instalar-dependencias","title":"3.1 Instalar depend\u00eancias","text":"<p>No venv-back, rode:</p> <pre><code>pip install Flask-SQLAlchemy Flask-Migrate psycopg2-binary python-dotenv\n</code></pre> <p>E atualize o <code>requirements.txt</code>:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"aula_4/aula_4/#32-estrutura-de-pastas","title":"3.2 Estrutura de pastas","text":"<p>At\u00e9 a Aula 3, todo o c\u00f3digo do back-end estava dentro de um \u00fanico arquivo (<code>app.py</code>). Isso funciona em projetos pequenos, mas logo fica dif\u00edcil de manter: o arquivo cresce demais, mistura responsabilidades (rotas, conex\u00e3o com banco, regras de neg\u00f3cio), e qualquer altera\u00e7\u00e3o vira uma bagun\u00e7a.</p> <p>Por isso, agora separamos em arquivos e pastas bem definidos:</p> <pre><code>backend/\n\u251c\u2500 app.py             # Ponto de entrada da aplica\u00e7\u00e3o\n\u251c\u2500 app/\n\u2502  \u251c\u2500 __init__.py     # Cria\u00e7\u00e3o da app Flask + integra\u00e7\u00e3o com extens\u00f5es\n\u2502  \u251c\u2500 config.py       # Configura\u00e7\u00f5es (ex.: banco de dados, vari\u00e1veis de ambiente)\n\u2502  \u251c\u2500 models.py       # Modelos (classes que viram tabelas no banco)\n\u2502  \u2514\u2500 routes.py       # Rotas (endpoints da API)\n\u2514\u2500 migrations/        # Hist\u00f3rico de altera\u00e7\u00f5es no banco (ser\u00e1 criado pelo Flask-Migrate)\n\n</code></pre>"},{"location":"aula_4/aula_4/#33-configuracao-appconfigpy","title":"3.3 Configura\u00e7\u00e3o (<code>app/config.py</code>)","text":"<p>Guarda as informa\u00e7\u00f5es sens\u00edveis e de ambiente (como URL do banco e chave secreta):</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Config:\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"DATABASE_URL\")\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n</code></pre> <p>Crie tamb\u00e9m um arquivo .env na pasta <code>backend/</code>:</p> <pre><code>DATABASE_URL=postgresql://postgres:admin@localhost:5432/trilha_db\nSECRET_KEY=umasecretkey\n</code></pre> <p>O formato da conex\u00e3o \u00e9 sempre:</p> <pre><code>postgresql://USUARIO:SENHA@HOST:PORTA/NOME_DO_BANCO\n</code></pre> <p><code>SECRET_KEY</code></p> <p>Essa chave \u00e9 usada pelo Flask para assinar tokens e cookies de sess\u00e3o.</p> <ul> <li>Voc\u00ea mesmo define qualquer valor aleat\u00f3rio.</li> <li>No seu caso, pode ser <code>\"umasecretkey\"</code>, <code>\"segredo123\"</code>, <code>\"minha_chave_super_segura\"</code>, ou at\u00e9 gerar algo maior.</li> <li>N\u00e3o precisa ter definido antes, \u00e9 voc\u00ea que decide agora.</li> <li>Em projetos s\u00e9rios, o ideal \u00e9 gerar algo bem forte (ex.: <code>openssl rand -hex 32</code>) e n\u00e3o compartilhar no GitHub \u2014 sempre deixar no <code>.env</code>.</li> </ul> <p>Neste projeto, o <code>SECRET_KEY</code> ainda n\u00e3o est\u00e1 sendo usado diretamente, mas j\u00e1 deixamos ele preparado para quando precisar (ex.: autentica\u00e7\u00e3o com JWT ou sess\u00f5es Flask).</p>"},{"location":"aula_4/aula_4/#34-inicializacao-app__init__py","title":"3.4 Inicializa\u00e7\u00e3o (<code>app/__init__.py</code>)","text":"<p>Aqui centralizamos as extens\u00f5es do Flask: - <code>db = SQLAlchemy()</code> \u2192 conecta o Flask ao banco de dados.</p> <ul> <li> <p><code>migrate = Migrate()</code> \u2192 gerencia migrations (cria\u00e7\u00e3o e altera\u00e7\u00e3o de tabelas).</p> </li> <li> <p><code>create_app()</code> \u2192 cria a inst\u00e2ncia Flask e registra o blueprint com as rotas.</p> </li> </ul> <p>Esse arquivo \u00e9 o cora\u00e7\u00e3o do back-end: garante que tudo esteja pronto (banco, CORS, rotas).</p> <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\nfrom flask_cors import CORS\nfrom .config import Config\n\ndb = SQLAlchemy()\nmigrate = Migrate()\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n\n    CORS(app, origins=[\"http://localhost:5173\"])\n\n    db.init_app(app)\n    migrate.init_app(app, db)\n\n    from .routes import main\n    app.register_blueprint(main)\n\n    return app\n</code></pre>"},{"location":"aula_4/aula_4/#35-model-appmodelspy","title":"3.5 Model (<code>app/models.py</code>)","text":"<p>Cada classe Python aqui representa uma tabela do banco:</p> <pre><code>from . import db\n\nclass Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(150), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    tag = db.Column(db.String(50))\n</code></pre> <p><code>Note</code> \u2192 vira a tabela <code>note</code>.</p> <p><code>id</code> \u2192 coluna inteira, chave prim\u00e1ria.</p> <p><code>title</code>, <code>content</code> \u2192 colunas obrigat\u00f3rias (<code>nullable=False</code>).</p> <p><code>tag</code> \u2192 coluna opcional.</p> <p>Gra\u00e7as ao SQLAlchemy, n\u00e3o precisamos escrever SQL manual.</p>"},{"location":"aula_4/aula_4/#36-rotas-approutespy","title":"3.6 Rotas (<code>app/routes.py</code>)","text":"<p>Aqui ficam os endpoints (as \u201cportas de entrada\u201d para o front se comunicar com o back). Exemplos: - <code>POST /api/notes</code> \u2192 cria uma nota.</p> <ul> <li> <p><code>GET /api/notes/&lt;id&gt;</code> \u2192 busca uma nota espec\u00edfica.</p> </li> <li> <p><code>PUT /api/notes/&lt;id&gt;</code> \u2192 edita uma nota.</p> </li> <li> <p><code>DELETE /api/notes/&lt;id&gt;</code> \u2192 apaga uma nota.</p> </li> </ul> <pre><code>from flask import Blueprint, request, jsonify\nfrom .models import Note\nfrom . import db\n\nmain = Blueprint(\"main\", __name__)\n\n# GET all\n@main.route(\"/api/notes\", methods=[\"GET\"])\ndef get_notes():\n    notes = Note.query.order_by(Note.id).all()\n    return jsonify([{\n        \"id\": n.id, \"title\": n.title, \"content\": n.content, \"tag\": n.tag\n    } for n in notes])\n\n# POST\n@main.route(\"/api/notes\", methods=[\"POST\"])\ndef add_note():\n    data = request.get_json()\n\n    note = Note(\n        title=data[\"title\"].strip(),\n        content=data[\"content\"].strip(),\n        tag=data.get(\"tag\", \"\").strip()\n    )\n    db.session.add(note)\n    db.session.commit()\n    return jsonify({\n        \"id\": note.id, \"title\": note.title, \"content\": note.content, \"tag\": note.tag\n    }), 201\n\n# GET one\n@main.route(\"/api/notes/&lt;int:id&gt;\", methods=[\"GET\"])\ndef get_note(id):\n    note = Note.query.get_or_404(id)\n    return jsonify({\"id\": note.id, \"title\": note.title, \"content\": note.content, \"tag\": note.tag})\n\n# PUT\n@main.route(\"/api/notes/&lt;int:id&gt;\", methods=[\"PUT\"])\ndef update_note(id):\n    note = Note.query.get_or_404(id)\n    data = request.get_json()\n\n    note.title = data[\"title\"].strip()\n    note.content = data[\"content\"].strip()\n    note.tag = data.get(\"tag\", \"\").strip()\n    db.session.commit()\n    return jsonify({\"id\": note.id, \"title\": note.title, \"content\": note.content, \"tag\": note.tag})\n\n# DELETE\n@main.route(\"/api/notes/&lt;int:id&gt;\", methods=[\"DELETE\"])\ndef delete_note(id):\n    note = Note.query.get_or_404(id)\n    db.session.delete(note)\n    db.session.commit()\n    return \"\", 204\n</code></pre>"},{"location":"aula_4/aula_4/#37-arquivo-principal-apppy","title":"3.7 Arquivo principal (<code>app.py</code>)","text":""},{"location":"aula_4/aula_4/#atualizando-o-apppy","title":"Atualizando o <code>app.py</code>","text":"<p>At\u00e9 a Aula 3, o nosso <code>app.py</code> tinha tudo dentro dele:</p> <ul> <li>Era o banco de dados (lista <code>notes</code>);</li> <li>As rotas da API (<code>/api/notes</code>, <code>/api/tags</code> etc.);</li> <li>A fun\u00e7\u00e3o principal para rodar o servidor Flask.</li> </ul> <p>Esse modelo funciona em projetos pequenos, mas rapidamente vira um problema: o arquivo fica gigante, dif\u00edcil de organizar e de manter.</p>"},{"location":"aula_4/aula_4/#como-fica-o-apppy-agora","title":"Como fica o <code>app.py</code> agora?","text":"<p>Apagamos todo o conte\u00fado antigo e deixamos apenas:</p> <pre><code>from app import create_app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=5000)\n</code></pre>"},{"location":"aula_4/aula_4/#o-que-esta-acontecendo-aqui","title":"O que est\u00e1 acontecendo aqui?","text":"<ul> <li><code>from app import create_app</code> \u2192 Importa a fun\u00e7\u00e3o <code>create_app</code> que criamos em <code>app/__init__.py</code>.</li> <li> <p><code>app = create_app()</code> \u2192 Cria a inst\u00e2ncia do Flask j\u00e1 configurada com:</p> </li> <li> <p>Conex\u00e3o ao banco de dados (SQLAlchemy);</p> </li> <li>Sistema de migrations (Flask-Migrate);</li> <li>CORS habilitado;</li> <li>Blueprints com todas as rotas da API.</li> <li>O bloco <code>if __name__ == \"__main__\":</code> \u2192 Garante que o servidor Flask s\u00f3 seja iniciado quando rodamos <code>python app.py</code>, e n\u00e3o quando importamos esse arquivo em outro lugar.</li> <li><code>app.run(...)</code> \u2192 De fato, sobe o servidor na porta <code>5000</code>.</li> </ul>"},{"location":"aula_4/aula_4/#por-que-mudar","title":"Por que mudar?","text":"<p>Agora que estamos usando SQLAlchemy + Flask-Migrate, \u00e9 a hora de organizar o projeto de forma mais profissional:</p> <ul> <li>A conex\u00e3o com o banco fica no <code>app/__init__.py</code>.</li> <li>As rotas ficam separadas em <code>app/routes.py</code>.</li> <li>Os modelos do banco (tabelas) ficam em <code>app/models.py</code>.</li> <li>O <code>app.py</code> passa a ser somente o ponto de entrada da aplica\u00e7\u00e3o.</li> </ul> <p>Assim, o c\u00f3digo fica mais limpo, f\u00e1cil de entender e pronto para crescer (com v\u00e1rias tabelas e rotas diferentes).</p>"},{"location":"aula_4/aula_4/#4-migrations-criando-tabela-notes","title":"4) Migrations (criando tabela notes)","text":"<p>O SQLAlchemy permite mapear tabelas como classes Python (ORM). Com o Flask-Migrate, conseguimos criar a estrutura do banco diretamente a partir dos modelos.</p> <p>No terminal, dentro da pasta <code>backend/</code>:</p> <pre><code>flask db init          # cria a pasta migrations (somente 1 vez no projeto)\nflask db migrate -m \"create notes\"\nflask db upgrade       # aplica as altera\u00e7\u00f5es \u2192 cria a tabela notes no banco\n</code></pre> <p>Agora, sempre que fizer altera\u00e7\u00f5es no <code>models.py</code>, o fluxo \u00e9:</p> <pre><code>flask db migrate -m \"descricao da mudan\u00e7a\"\nflask db upgrade\n</code></pre> <ol> <li> <p><code>flask db init</code></p> </li> <li> <p>Criou a pasta <code>migrations/</code> e os arquivos de configura\u00e7\u00e3o do Alembic (que \u00e9 quem o Flask-Migrate usa por baixo dos panos).</p> </li> <li> <p>Isso s\u00f3 precisa ser feito uma vez por projeto.</p> </li> <li> <p><code>flask db migrate -m \"create notes\"</code></p> </li> <li> <p>O Flask olhou para o seu <code>models.py</code>, percebeu que existe um modelo <code>Note</code>, e gerou um script de migration (<code>ab1b3f962119_create_notes.py</code>) dentro de <code>migrations/versions/</code>.</p> </li> <li> <p>Esse script \u00e9 tipo um \"hist\u00f3rico\" dizendo: \"criar a tabela note com as colunas id, title, content, tag\".</p> </li> <li> <p><code>flask db upgrade</code></p> </li> <li> <p>Aplicou esse script no banco de dados <code>trilha_db</code>.</p> </li> <li> <p>Agora a tabela <code>note</code> foi realmente criada no PostgreSQL.</p> </li> <li> <p>Abra o pgAdmin, atualize as tabelas dentro de <code>trilha_db</code>, e voc\u00ea deve ver a tabela <code>note</code>.</p> </li> <li> <p>No pgAdmin, em <code>Tables</code>, aparecem:</p> </li> <li> <p><code>note</code> \u2192 que \u00e9 justamente a tabela criada a partir do seu modelo <code>Note</code> em <code>models.py</code>.</p> </li> <li> <p><code>alembic_version</code> \u2192 essa tabela \u00e9 criada automaticamente pelo Flask-Migrate para controlar quais migrations j\u00e1 foram aplicadas.</p> </li> <li> <p>Clique com o bot\u00e3o direito \u2192 View/Edit Data \u2192 All Rows e deve aparecer uma tabela vazia, mas j\u00e1 com as colunas (<code>id</code>, <code>title</code>, <code>content</code>, <code>tag</code>).</p> </li> <li> <p><code>id</code> (PK, auto-incremento)</p> </li> <li><code>title</code> (<code>varchar(150)</code>, obrigat\u00f3rio)</li> <li><code>content</code> (<code>text</code>, obrigat\u00f3rio)</li> <li><code>tag</code> (<code>varchar(50)</code>, opcional)</li> </ol> <p>Ou seja, est\u00e1 exatamente de acordo com o modelo que voc\u00ea definiu no <code>models.py</code>:</p> <pre><code>class Note(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(150), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    tag = db.Column(db.String(50))\n</code></pre> <p>Agora temos uma tabela <code>notes</code> pronta para receber nossos dados.</p> <p>Os tipos de dados que usamos em nossas tabelas s\u00e3o muito importantes, pois diferentes tipos de dados tem diferentes tratamentos e consomem diferentes quantidades de espa\u00e7o em disco. Abaixo est\u00e3o os principais tipos de dados de string em SQL.</p> <p></p>"},{"location":"aula_4/aula_4/#o-que-mudou-da-aula-3-para-a-aula-4","title":"O que mudou da Aula 3 para a Aula 4?","text":"<p>Tente adicionar e deletar um post-it pela interface web e veja que ele aparece no banco de dados (pgAdmin).</p> <p>Na Aula 3, nosso back-end usava apenas uma lista em mem\u00f3ria (<code>notes</code>) para armazenar os post-its. Agora, na Aula 4, fizemos a migra\u00e7\u00e3o para o PostgreSQL usando SQLAlchemy.</p>"},{"location":"aula_4/aula_4/#5-vamos-criar-agora-a-funcionalidade-de-edicao","title":"5) Vamos criar agora a funcionalidade de Edi\u00e7\u00e3o","text":""},{"location":"aula_4/aula_4/#pagina-de-edicao","title":"P\u00e1gina de edi\u00e7\u00e3o","text":"<p>Crie <code>src/pages/EditNote.jsx</code>:</p> <pre><code>import { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nexport default function EditNote() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [tag, setTag] = useState(\"\");\n\n  // Buscar nota existente pelo id\n  useEffect(() =&gt; {\n    fetch(`http://localhost:5000/api/notes/${id}`)\n      .then((r) =&gt; r.json())\n      .then((note) =&gt; {\n        if (note.error) {\n          alert(\"Nota n\u00e3o encontrada!\");\n          navigate(\"/\");\n        } else {\n          setTitle(note.title);\n          setContent(note.content);\n          setTag(note.tag || \"\");\n        }\n      });\n  }, [id, navigate]);\n\n  function handleUpdate(e) {\n    e.preventDefault();\n    fetch(`http://localhost:5000/api/notes/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ title, content, tag }),\n    })\n      .then((r) =&gt; r.json())\n      .then(() =&gt; navigate(\"/\"));\n  }\n\n  return (\n    &lt;main className=\"container\"&gt;\n      &lt;form className=\"form-card\" onSubmit={handleUpdate}&gt;\n        &lt;input\n          className=\"form-card-title\"\n          value={title}\n          onChange={(e) =&gt; setTitle(e.target.value)}\n        /&gt;\n        &lt;textarea\n          className=\"autoresize\"\n          value={content}\n          onChange={(e) =&gt; setContent(e.target.value)}\n        /&gt;\n        &lt;input\n          className=\"form-card-tag\"\n          value={tag}\n          onChange={(e) =&gt; setTag(e.target.value)}\n        /&gt;\n        &lt;button className=\"btn-criar\"&gt;Salvar&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"aula_4/aula_4/#ajustando-rotas","title":"Ajustando rotas","text":"<p>No <code>routes.jsx</code>, adicione a rota de edi\u00e7\u00e3o:</p> <pre><code>import EditNote from \"../pages/EditNote\";\n\nexport const router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;Layout /&gt;,\n    children: [\n      { path: \"/\", element: &lt;Home /&gt; },\n      { path: \"/edit/:id\", element: &lt;EditNote /&gt; },\n    ],\n  },\n]);\n</code></pre>"},{"location":"aula_4/aula_4/#botao-de-edicao","title":"Bot\u00e3o de edi\u00e7\u00e3o","text":"<p>No <code>Home.jsx</code>, dentro do <code>map</code>, adicione o bot\u00e3o de edi\u00e7\u00e3o junto da lixeira:</p> <pre><code>  &lt;a href={`/edit/${note.id}`} className=\"edit\"&gt;\u270f\ufe0f&lt;/a&gt;\n</code></pre> <p>Agora cada post-it ter\u00e1 bot\u00e3o de editar e bot\u00e3o de deletar. Teste para ver se deu certo.</p> <p>O nosso fluxo ficou assim:</p> <ul> <li><code>GET /api/notes</code> \u2192 lista todas as notas.</li> <li><code>GET /api/notes/&lt;id&gt;</code> \u2192 busca s\u00f3 uma nota.</li> <li><code>PUT /api/notes/&lt;id&gt;</code> \u2192 edita uma nota.</li> <li>O front consome diretamente o endpoint correto sem baixar dados desnecess\u00e1rios.</li> </ul>"},{"location":"aula_4/aula_4/#6-correcao-de-notas","title":"6) Corre\u00e7\u00e3o de notas","text":"<p>Por enquanto, ao tentar criar ou editar uma nota, n\u00e3o h\u00e1 valida\u00e7\u00e3o se o t\u00edtulo ou conte\u00fado est\u00e3o vazios. At\u00e9 colocamos no SQL que esses campos s\u00e3o <code>NOT NULL</code>, mas se tentarmos enviar uma nota sem conte\u00fado ou t\u00edtulo, ela vai ser adicionada normalmente pois fica como string vazia <code>\"\"</code> o que \u00e9 diferente de <code>NULL</code>.</p>"},{"location":"aula_4/aula_4/#editando-o-routespy","title":"Editando o <code>routes.py</code>:","text":"<p>Adicione este campo em duas fun\u00e7\u00f5es logo depois de <code>data = request.get_json()</code> no <code>/api/notes POST</code> e <code>/api/notes/&lt;int:id&gt; PUT</code>:</p> <pre><code>if not data.get(\"title\", \"\").strip() or not data.get(\"content\", \"\").strip():\n        return jsonify({\"error\": \"T\u00edtulo e conte\u00fado s\u00e3o obrigat\u00f3rios\"}), 400\n</code></pre>"},{"location":"aula_4/aula_4/#atualizando-o-front-homejsx","title":"Atualizando o front <code>Home.jsx</code>:","text":"<pre><code>    function handleSubmit(e) {\n        e.preventDefault();\n\n        if (!title.trim() || !content.trim()) {\n            alert(\"T\u00edtulo e conte\u00fado s\u00e3o obrigat\u00f3rios!\");\n            return;\n        }\n        fetch(\"http://localhost:5000/api/notes\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ title, content, tag }),\n        })\n            .then(async (r) =&gt; {\n                if (r.status === 201) {\n                    const newNote = await r.json();\n                    setNotes([...notes, newNote]); // s\u00f3 adiciona se o back realmente criou\n                    setTitle(\"\");\n                    setContent(\"\");\n                    setTag(\"\");\n                } else if (r.status === 400) {\n                    const error = await r.json();\n                    alert(error.error);\n                }\n            });\n    }\n</code></pre>"},{"location":"aula_4/aula_4/#atualizando-o-editnotejsx","title":"Atualizando o <code>EditNote.jsx</code>:","text":"<p>Mesma coisa que fizemos em <code>Home.jsx</code>, mas na fun\u00e7\u00e3o <code>handleUpdate</code>:</p> <pre><code>function handleUpdate(e) {\n  e.preventDefault();\n\n  // Valida\u00e7\u00e3o no front: impedir edi\u00e7\u00e3o vazia\n  if (!title.trim() || !content.trim()) {\n    alert(\"T\u00edtulo e conte\u00fado s\u00e3o obrigat\u00f3rios!\");\n    return;\n  }\n\n  fetch(`http://localhost:5000/api/notes/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ title, content, tag }),\n  })\n    .then(async (r) =&gt; {\n      if (r.status === 200) {\n        await r.json();\n        navigate(\"/\");\n      } else if (r.status === 400) {\n        const error = await r.json();\n        alert(error.error);\n      }\n    });\n}\n\n</code></pre>"},{"location":"aula_4/aula_4/#7-validacao","title":"7) Valida\u00e7\u00e3o","text":"<p>J\u00e1 implementamos no back e no front a checagem para evitar notas sem t\u00edtulo ou conte\u00fado. Confira se ao tentar criar ou editar uma nota vazia, aparece o alerta.</p>"},{"location":"aula_4/aula_4/#8-trabalhando-com-tags","title":"8) Trabalhando com Tags","text":"<p>At\u00e9 agora, nossas notas j\u00e1 tinham um campo <code>tag</code>, mas ele ainda n\u00e3o estava sendo usado de forma completa. Agora vamos implementar mas sem CSS:</p> <ol> <li>Endpoint para listar todas as tags existentes.</li> <li>P\u00e1gina <code>/tags</code> para mostrar a lista de tags.</li> <li>P\u00e1gina <code>/tags/:tag</code> para mostrar todas as notas de uma tag espec\u00edfica.</li> <li>Links nas notas para navegar por tag.</li> </ol>"},{"location":"aula_4/aula_4/#51-back-end-flask","title":"5.1 Back-end (Flask)","text":""},{"location":"aula_4/aula_4/#a-listar-todas-as-tags","title":"a) Listar todas as tags","text":"<p>No <code>routes.py</code>, adicione:</p> <pre><code># Listar todas as tags \u00fanicas\n@main.route(\"/api/tags\", methods=[\"GET\"])\ndef list_tags():\n    tags = db.session.query(Note.tag).distinct().filter(Note.tag != \"\").all()\n    return jsonify([t[0] for t in tags])\n</code></pre>"},{"location":"aula_4/aula_4/#b-listar-notas-de-uma-tag-especifica","title":"b) Listar notas de uma tag espec\u00edfica","text":"<p>Ainda no <code>routes.py</code>, adicione:</p> <pre><code># Listar todas as notas de uma tag espec\u00edfica\n@main.route(\"/api/tags/&lt;tag_name&gt;\", methods=[\"GET\"])\ndef notes_by_tag(tag_name):\n    notes = Note.query.filter_by(tag=tag_name).all()\n    return jsonify([\n        {\"id\": n.id, \"title\": n.title, \"content\": n.content, \"tag\": n.tag}\n        for n in notes\n    ])\n</code></pre>"},{"location":"aula_4/aula_4/#52-front-end-pagina-de-tags","title":"5.2 Front-end \u2014 P\u00e1gina de Tags","text":"<p>Crie <code>src/pages/Tags.jsx</code>:</p> <pre><code>import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Tags() {\n  const [tags, setTags] = useState([]);\n\n  useEffect(() =&gt; {\n    fetch(\"http://localhost:5000/api/tags\")\n      .then((r) =&gt; r.json())\n      .then(setTags);\n  }, []);\n\n  return (\n    &lt;main className=\"container\"&gt;\n      &lt;h2&gt;Todas as tags&lt;/h2&gt;\n      &lt;ul&gt;\n        {tags.map((t, i) =&gt; (\n          &lt;li key={i}&gt;\n            &lt;Link to={`/tags/${t}`} className=\"card-tag-link\"&gt;#{t}&lt;/Link&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"aula_4/aula_4/#53-front-end-pagina-de-notas-por-tag","title":"5.3 Front-end \u2014 P\u00e1gina de Notas por Tag","text":"<p>Crie <code>src/pages/NotesByTag.jsx</code>:</p> <pre><code>import { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\n\nexport default function NotesByTag() {\n  const { tag } = useParams();\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    fetch(`http://localhost:5000/api/tags/${tag}`)\n      .then((r) =&gt; r.json())\n      .then(setNotes);\n  }, [tag]);\n\n  return (\n    &lt;main className=\"container\"&gt;\n      &lt;h2&gt;Notas com a tag: #{tag}&lt;/h2&gt;\n      &lt;ul className=\"card-container\"&gt;\n        {notes.map((note) =&gt; (\n          &lt;div className=\"card\" key={note.id}&gt;\n            &lt;h3 className=\"card-title\"&gt;{note.title}&lt;/h3&gt;\n            &lt;div className=\"card-content\"&gt;\n              &lt;p&gt;{note.content}&lt;/p&gt;\n              {note.tag &amp;&amp; (\n                &lt;Link to={`/tags/${note.tag}`} className=\"card-tag\"&gt;\n                  #{note.tag}\n                &lt;/Link&gt;\n              )}\n            &lt;/div&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"aula_4/aula_4/#54-ajustando-rotas","title":"5.4 Ajustando rotas","text":"<p>No <code>routes.jsx</code>, adicione as duas p\u00e1ginas novas:</p> <pre><code>import Tags from \"../pages/Tags\";\nimport NotesByTag from \"../pages/NotesByTag\";\n\nexport const router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;Layout /&gt;,\n    children: [\n      { path: \"/\", element: &lt;Home /&gt; },\n      { path: \"/edit/:id\", element: &lt;EditNote /&gt; },\n      { path: \"/tags\", element: &lt;Tags /&gt; },\n      { path: \"/tags/:tag\", element: &lt;NotesByTag /&gt; },\n    ],\n  },\n]);\n</code></pre>"},{"location":"aula_4/aula_4/#55-linkando-tags-nas-notas","title":"5.5 Linkando tags nas notas","text":"<p>No <code>Home.jsx</code>, ajuste a parte que renderiza a tag para ficar clic\u00e1vel:</p> <pre><code>{note.tag &amp;&amp; (\n  &lt;a href={`/tags/${note.tag}`} className=\"card-tag-link\"&gt;#{note.tag}&lt;/a&gt;\n)}\n</code></pre>"},{"location":"aula_4/aula_4/#56-resultado","title":"5.6 Resultado:","text":"<ol> <li>Criar notas com tags.</li> <li>Ir para <code>/tags</code> \u2192 lista de todas as tags \u00fanicas.</li> <li>Clicar em uma tag \u2192 <code>/tags/:tag</code> \u2192 mostra s\u00f3 as notas daquela tag.</li> </ol>"},{"location":"aula_4/aula_4/#9-conclusao","title":"9) Conclus\u00e3o","text":"<p>Agora temos:</p> <ul> <li>Back-end organizado com Flask + SQLAlchemy + Migrations;</li> <li>Modelo <code>Note</code> que representa a tabela <code>notes</code>;</li> <li>CRUD completo (Create, Read, Update, Delete);</li> <li>Valida\u00e7\u00e3o para evitar notas vazias;</li> <li>Tags para organizar e filtrar notas.</li> </ul>"},{"location":"aula_5/aula_5/","title":"Aula 5 \u2014 Deploy do Projeto Full-Stack","text":"<p>Chegamos na \u00faltima etapa da trilha! At\u00e9 agora, constru\u00edmos um projeto completo com React + Vite no front, Flask + PostgreSQL no back e fizemos todo o CRUD (Create, Read, Update, Delete) com suporte a tags.</p> <p>Agora vamos dar o passo final: colocar o projeto no ar para que qualquer pessoa possa acessar.</p>"},{"location":"aula_5/aula_5/#objetivos-da-aula","title":"Objetivos da Aula","text":"<ol> <li>Hospedar o back-end Flask + Banco de Dados PostgreSQL em uma plataforma de cloud gratuita.</li> <li>Hospedar o front-end React (Vite) em uma plataforma de deploy est\u00e1tico.</li> <li>Configurar vari\u00e1veis de ambiente (sem expor senhas).</li> <li>Ajustar CORS e URLs para que front e back se comuniquem mesmo hospedados em dom\u00ednios diferentes.</li> </ol>"},{"location":"aula_5/aula_5/#1-hospedando-o-back-end-postgresql-flask","title":"1) Hospedando o Back-end (PostgreSQL + Flask)","text":"<p>Existem v\u00e1rias op\u00e7\u00f5es de hospedagem gratuita para back-ends Python:</p> <ul> <li>Render</li> <li>Railway</li> <li>Fly.io</li> </ul> <p>Aqui vamos usar o Render, que \u00e9 simples e tem plano gratuito.</p>"},{"location":"aula_5/aula_5/#11-banco-de-dados-postgresql-no-render","title":"1.1 Banco de Dados PostgreSQL no Render","text":"<ol> <li>Acesse https://render.com.</li> <li> <p>Crie sua conta (de prefer\u00eancia logar com GitHub). Ao entrar voc\u00ea dever\u00e1 encontrar uma tela como esta: </p> </li> <li> <p>V\u00e1 em Postgres e selecione essas op\u00e7\u00f5es. Eu criei um projeto para organizar melhor os servi\u00e7os mas n\u00e3o \u00e9 obrigat\u00f3rio: </p> </li> <li> <p>Selecione o plano Free e em seguida clique em Create Database. Voc\u00ea ver\u00e1 uma tela como esta:</p> </li> </ol> <p></p> <p>\u00c9 o External Database URL que voc\u00ea vai usar no DATABASE_URL do backend, copie ela.</p> <ol> <li>No seu projeto, dentro da pasta backend/, abra o arquivo .env e coloque a URL no DATABASE_URL. </li> </ol>"},{"location":"aula_5/aula_5/#12-backend-no-render","title":"1.2 Backend no Render","text":"<p>Antes de come\u00e7ar o deploy, precisamos adicionar no requirements.txt o gunicorn, que \u00e9 o servidor de produ\u00e7\u00e3o para aplica\u00e7\u00f5es Python.</p> <pre><code>pip install gunicorn\npip freeze &gt; requirements.txt\n# Commite essas mudan\u00e7as\n</code></pre> <ol> <li> <p>Volte para a tela inicial do Render, entre no projeto \u2192 <code>+</code> \u2192 Web Services. </p> </li> <li> <p>Selecione o reposit\u00f3rio do GitHub onde est\u00e1 o seu projeto (voc\u00ea tem que ter tudo commitado). Caso n\u00e3o apare\u00e7a, clique em Credentials e autorize o acesso ao reposit\u00f3rio. Voc\u00ea ver\u00e1 uma tela como esta: </p> </li> </ol>"},{"location":"aula_5/aula_5/#configuracoes-do-web-service-render","title":"Configura\u00e7\u00f5es do Web Service (Render)","text":"<p>Source Code</p> <ul> <li>Selecione o reposit\u00f3rio <code>trilha-dev-web</code>.</li> </ul> <p>Name</p> <ul> <li><code>trilha-dev-web</code> (ou outro nome amig\u00e1vel).</li> </ul> <p>Project</p> <ul> <li>Opcional (pode colocar \u201cTrilha Desenvolvimento Web\u201d para organizar).</li> </ul> <p>Language</p> <ul> <li><code>Python</code>.</li> </ul> <p>Branch</p> <ul> <li><code>main</code> (ou o branch que voc\u00ea usa no GitHub).</li> </ul> <p>Root Directory</p> <ul> <li><code>backend</code></li> </ul> <p>Build Command</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Start Command</p> <pre><code>gunicorn \"app:create_app()\"\n</code></pre> <p>Environment Variables Clique em + Add Environment Variable e adicione:</p> <ul> <li><code>DATABASE_URL</code> \u2192 cole a External Database URL do Postgres criado no Render.</li> <li><code>SECRET_KEY</code> \u2192 pode colocar a mesma que j\u00e1 tinhamos.</li> </ul> <p>Advanced</p> <ul> <li>Health Check Path \u2192 pode deixar vazio (ou <code>/</code>).</li> <li>Pre-Deploy Command \u2192 deixe vazio (a n\u00e3o ser que queira rodar migrations aqui).</li> <li>Auto-Deploy \u2192 <code>On Commit</code> (para atualizar sempre que voc\u00ea fizer <code>git push</code>).</li> </ul> <p>Build Filters</p> <ul> <li>Deixe vazio.</li> </ul> <p>Depois clique em Deploy Web Service </p> <ol> <li>Aguarde o deploy (pode levar alguns minutos). Se tudo der certo, voc\u00ea ver\u00e1 uma tela como esta:</li> </ol> <p></p> <p>Tente entrar na url fornecida no <code>/api/notes</code> para ver se est\u00e1 funcionando. Provavelmente estar\u00e1 retornando erro 500, pois o banco de dados ainda n\u00e3o foi inicializado.</p> <p>V\u00e1 no terminal do back e rode:</p> <pre><code>flask db upgrade\n</code></pre> <p>Espere alguns segundos e atualize a p\u00e1gina. Agora deve funcionar, voc\u00ea ver\u00e1 um <code>[]</code> (lista vazia)!</p>"},{"location":"aula_5/aula_5/#2-hospedando-o-front-end-react-vite","title":"2) Hospedando o Front-end (React + Vite)","text":""},{"location":"aula_5/aula_5/#1-ajustar-o-front-para-usar-o-back-remoto","title":"1. Ajustar o front para usar o back remoto","text":"<ol> <li>Na pasta <code>frontend/</code>, crie um arquivo <code>.env</code>:</li> </ol> <p><code>env    VITE_API_URL=&lt;URL DO SEU BACK&gt;</code></p> <ol> <li>No c\u00f3digo React, garanta que todos os <code>fetch</code> est\u00e3o usando a vari\u00e1vel de ambiente.    Exemplo no <code>Home.jsx</code>:</li> </ol> <p><code>js    useEffect(() =&gt; {      fetch(`${import.meta.env.VITE_API_URL}/api/notes`)        .then((r) =&gt; r.json())        .then(setNotes);    }, []);</code></p> <p>E no <code>handleSubmit</code>:</p> <p><code>js    fetch(`${import.meta.env.VITE_API_URL}/api/notes`, {      method: \"POST\",      headers: { \"Content-Type\": \"application/json\" },      body: JSON.stringify({ title, content, tag }),    })</code></p> <p>Isso garante que, no Vercel, o front vai falar direto com o back no Render. Cuidado com os que s\u00e3o <code>/api/tag</code>.</p>"},{"location":"aula_5/aula_5/#2-subir-para-github","title":"2. Subir para GitHub","text":"<ol> <li><code>git add .</code></li> <li><code>git commit -m \"prepara frontend para deploy\"</code></li> <li><code>git push origin main</code></li> </ol>"},{"location":"aula_5/aula_5/#3-criar-o-projeto-no-vercel","title":"3. Criar o projeto no Vercel","text":"<ol> <li>V\u00e1 em https://vercel.com.</li> <li>Crie sua conta (ou logue com GitHub).</li> <li>Clique em New Project \u2192 selecione o reposit\u00f3rio <code>trilha-dev-web</code>.</li> <li> <p>Nas configura\u00e7\u00f5es:</p> </li> <li> <p>Root Directory \u2192 <code>frontend</code></p> </li> <li>Framework Preset \u2192 Vite</li> <li>Build Command \u2192 <code>npm run build</code></li> <li>Output Directory \u2192 <code>dist</code></li> <li>Install Command: deixe vazio</li> <li>Environment Variables: Colocar o do backend<pre><code>Name: `VITE_API_URL`\n\nValue: `https://trilha-dev-web.onrender.com`\n</code></pre> </li> </ol>"},{"location":"aula_5/aula_5/#4-deploy","title":"4. Deploy","text":"<ol> <li>Clique em Deploy.</li> <li>O Vercel vai rodar o build (<code>npm install</code>, <code>npm run build</code>) e depois disponibilizar seu site.</li> <li>Voc\u00ea vai ganhar uma URL p\u00fablica, algo como:</li> </ol> <p><code>https://trilha-dev-web.vercel.app/</code></p>"},{"location":"aula_5/aula_5/#5-ajustar-cors-no-back","title":"5. Ajustar CORS no back","text":"<p>No <code>app/__init__.py</code>, troque:</p> <pre><code>CORS(app, origins=[\"http://localhost:5173\"])\n</code></pre> <p>por:</p> <pre><code>CORS(app, origins=[\n    \"http://localhost:5173\",            # Dev local\n    \"https://trilha-dev-web.vercel.app\" # Produ\u00e7\u00e3o no Vercel\n])\n</code></pre> <p>Depois fa\u00e7a commit e push \u2192 o Render vai redeployar sozinho.</p>"},{"location":"aula_5/aula_5/#6-testar","title":"6. Testar","text":"<ol> <li>Abra a URL do Vercel no navegador.</li> <li>Crie, edite e delete notas.</li> <li>Verifique no Render Database se os dados est\u00e3o realmente indo para o Postgres remoto.</li> </ol>"},{"location":"aula_5/aula_5/#3-corrigindo-erro-404-nas-rotas-do-vercel","title":"3). Corrigindo erro 404 nas rotas do Vercel","text":"<p>Se voc\u00ea tentar acessar alguma tag, editar um post-it ou acessar diretamente uma rota do seu site no Vercel (por exemplo <code>/edit/8</code> ou <code>/tags/trabalho</code>), pode aparecer o erro:</p> <pre><code>404: NOT_FOUND\n</code></pre> <p>Isso acontece porque o Vercel tenta procurar um arquivo f\u00edsico naquela rota (ex.: <code>tags/trabalho/index.html</code>), mas como estamos usando React Router (Single Page Application), todas as rotas precisam ser redirecionadas para o <code>index.html</code>.</p>"},{"location":"aula_5/aula_5/#como-resolver","title":"Como resolver","text":"<p>Precisamos criar um arquivo de configura\u00e7\u00e3o chamado <code>vercel.json</code> dentro da pasta <code>frontend/</code>:</p> <pre><code>trilha-dev-web/\n\u251c\u2500 backend/     # Flask (Render)\n\u251c\u2500 frontend/    # React (Vercel)\n\u2502   \u251c\u2500 src/\n\u2502   \u251c\u2500 package.json\n\u2502   \u251c\u2500 index.html\n\u2502   \u2514\u2500 vercel.json   \u2705 aqui!\n</code></pre> <p>Conte\u00fado do arquivo <code>frontend/vercel.json</code>:</p> <pre><code>{\n  \"rewrites\": [\n    { \"source\": \"/(.*)\", \"destination\": \"/\" }\n  ]\n}\n</code></pre> <p>Esse arquivo diz ao Vercel:</p> <p>\u201cIndependente da rota acessada, sempre entregue o <code>index.html</code>. O React Router cuida de mostrar a p\u00e1gina correta.\u201d</p>"},{"location":"aula_5/aula_5/#passos-finais","title":"Passos finais","text":"<ol> <li>Crie o arquivo <code>vercel.json</code> na pasta <code>frontend/</code>.</li> <li>Fa\u00e7a commit e push para o GitHub:</li> </ol> <p><code>bash    git add frontend/vercel.json    git commit -m \"fix: SPA routes config for Vercel\"    git push origin main</code> 3. O Vercel far\u00e1 um novo deploy automaticamente. 4. Agora, rotas como <code>/edit/8</code> ou <code>/tags/trabalho</code> v\u00e3o funcionar normalmente sem dar 404.</p>"},{"location":"aula_5/aula_5/#4-conclusao","title":"4) Conclus\u00e3o","text":"<p>Parab\u00e9ns! Agora voc\u00eas t\u00eam um projeto full-stack completo:</p> <ul> <li>React + Vite (front-end) hospedado no Vercel.</li> <li>Flask + PostgreSQL (back-end) hospedado no Render.</li> <li>CRUD completo com tags funcionando em produ\u00e7\u00e3o.</li> </ul> <p>Esse \u00e9 exatamente o fluxo que voc\u00eas usariam em um projeto real</p>"},{"location":"comandos_sql/comandos/","title":"\ud83d\udcd8 Guia de SQL (PostgreSQL)","text":""},{"location":"comandos_sql/comandos/#1-bancos-de-dados","title":"1. Bancos de Dados","text":"<pre><code>-- Criar um novo banco de dados\nCREATE DATABASE trilha_db;\n\n-- Apagar banco de dados (\u26a0\ufe0f remove tudo)\nDROP DATABASE trilha_db;\n\n-- Conectar em um banco (pelo psql)\n\\c trilha_db;\n</code></pre>"},{"location":"comandos_sql/comandos/#2-tabelas","title":"2. Tabelas","text":""},{"location":"comandos_sql/comandos/#criar-tabela","title":"Criar tabela","text":"<pre><code>CREATE TABLE notes (\n    id SERIAL PRIMARY KEY,           -- chave prim\u00e1ria, auto-incremental\n    title VARCHAR(200) NOT NULL,     -- string de at\u00e9 200 caracteres\n    content TEXT NOT NULL,           -- texto sem limite definido\n    tag VARCHAR(50),                 -- string curta\n    created_at TIMESTAMP DEFAULT NOW() -- data/hora autom\u00e1tica\n);\n</code></pre> <p>Voc\u00ea pode verificar todos os tipos de dados aqui ou W3 Schools.</p>"},{"location":"comandos_sql/comandos/#apagar-tabela","title":"Apagar tabela","text":"<pre><code>DROP TABLE notes;           -- apaga a tabela\nDROP TABLE IF EXISTS notes; -- apaga s\u00f3 se existir\n</code></pre>"},{"location":"comandos_sql/comandos/#alterar-tabela-existente","title":"Alterar tabela existente","text":"<pre><code>-- Renomear tabela\nALTER TABLE notes RENAME TO postits;\n\n-- Adicionar coluna\nALTER TABLE notes ADD COLUMN author VARCHAR(100);\n\n-- Alterar tipo de coluna\nALTER TABLE notes ALTER COLUMN title TYPE VARCHAR(300);\n\n-- Apagar coluna\nALTER TABLE notes DROP COLUMN author;\n</code></pre>"},{"location":"comandos_sql/comandos/#3-inserindo-dados","title":"3. Inserindo Dados","text":"<pre><code>-- Inserir valores em todas as colunas (menos o id, que \u00e9 autom\u00e1tico)\nINSERT INTO notes (title, content, tag)\nVALUES ('Primeira nota', 'Esse \u00e9 o conte\u00fado da nota', 'inicio');\n\n-- Inserir m\u00faltiplas linhas de uma vez\nINSERT INTO notes (title, content, tag)\nVALUES\n  ('Estudar SQL', 'Praticar comandos b\u00e1sicos', 'estudo'),\n  ('Reuni\u00e3o', 'Preparar slides at\u00e9 sexta', 'trabalho'),\n  ('Compras', 'Leite, p\u00e3o, caf\u00e9', 'pessoal');\n</code></pre>"},{"location":"comandos_sql/comandos/#4-consultando-dados","title":"4. Consultando Dados","text":"<pre><code>-- Selecionar tudo\nSELECT * FROM notes;\n\n-- Selecionar colunas espec\u00edficas\nSELECT id, title FROM notes;\n\n-- Renomear colunas no resultado\nSELECT id AS codigo, title AS titulo FROM notes;\n\n-- Selecionar com condi\u00e7\u00e3o\nSELECT * FROM notes WHERE tag = 'estudo';\n\n-- Condi\u00e7\u00f5es m\u00faltiplas\nSELECT * FROM notes WHERE tag = 'estudo' AND title LIKE '%SQL%';\n\n-- Operadores comuns:\n-- =   igual\n-- &lt;&gt;  diferente\n-- &gt;   maior\n-- &lt;   menor\n-- &gt;=  maior ou igual\n-- &lt;=  menor ou igual\n-- LIKE  compara\u00e7\u00e3o com padr\u00f5es\n-- ILIKE compara\u00e7\u00e3o sem diferenciar mai\u00fasc/min\u00fasc\n\n-- Exemplo com LIKE (buscar por \"SQL\" em qualquer parte do t\u00edtulo)\nSELECT * FROM notes WHERE title LIKE '%SQL%';\n\n-- Ordenar resultados\nSELECT * FROM notes ORDER BY created_at DESC;\n\n-- Limitar resultados\nSELECT * FROM notes LIMIT 5;\n\n-- Pular resultados e trazer s\u00f3 os pr\u00f3ximos (pagina\u00e7\u00e3o)\nSELECT * FROM notes OFFSET 5 LIMIT 5;\n</code></pre>"},{"location":"comandos_sql/comandos/#5-atualizando-dados","title":"5. Atualizando Dados","text":"<pre><code>-- Atualizar uma linha espec\u00edfica\nUPDATE notes\nSET content = 'Novo conte\u00fado da nota'\nWHERE id = 1;\n\n-- Atualizar v\u00e1rias linhas de uma vez\nUPDATE notes\nSET tag = 'pessoal'\nWHERE tag IS NULL;\n</code></pre>"},{"location":"comandos_sql/comandos/#6-deletando-dados","title":"6. Deletando Dados","text":"<pre><code>-- Apagar uma nota espec\u00edfica\nDELETE FROM notes WHERE id = 2;\n\n-- Apagar todas as notas com tag \"pessoal\"\nDELETE FROM notes WHERE tag = 'pessoal';\n\n-- Apagar todos os registros da tabela\nDELETE FROM notes;\n</code></pre>"},{"location":"comandos_sql/comandos/#7-funcoes-uteis","title":"7. Fun\u00e7\u00f5es \u00dateis","text":"<pre><code>-- Contar registros\nSELECT COUNT(*) FROM notes;\n\n-- Maior e menor id\nSELECT MAX(id), MIN(id) FROM notes;\n\n-- Quantidade de notas por tag\nSELECT tag, COUNT(*) FROM notes GROUP BY tag;\n\n-- Nota mais recente\nSELECT * FROM notes ORDER BY created_at DESC LIMIT 1;\n</code></pre>"},{"location":"comandos_sql/comandos/#8-chaves-estrangeiras-relacionamentos","title":"8. Chaves Estrangeiras (Relacionamentos)","text":"<p>Exemplo: um post-it pertence a um usu\u00e1rio.</p> <pre><code>-- Criar tabela de usu\u00e1rios\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\n-- Alterar tabela notes para relacionar com users\nALTER TABLE notes\nADD COLUMN user_id INT REFERENCES users(id);\n</code></pre> <p>Agora cada nota pode ter um <code>user_id</code> que aponta para a tabela <code>users</code>.</p>"},{"location":"comandos_sql/comandos/#9-joins-relacionando-tabelas","title":"9. Joins (Relacionando Tabelas)","text":"<pre><code>-- Juntar notas com seus usu\u00e1rios\nSELECT n.id, n.title, u.name\nFROM notes n\nJOIN users u ON n.user_id = u.id;\n\n-- Trazer todas as notas, mesmo sem usu\u00e1rio\nSELECT n.id, n.title, u.name\nFROM notes n\nLEFT JOIN users u ON n.user_id = u.id;\n</code></pre>"},{"location":"comandos_sql/comandos/#10-between","title":"10. <code>BETWEEN</code>","text":"<p>A cl\u00e1usula <code>BETWEEN</code> \u00e9 usada em SQL para selecionar valores dentro de um intervalo, inclusive os limites.</p>"},{"location":"comandos_sql/comandos/#sintaxe","title":"Sintaxe:","text":"<pre><code>valor BETWEEN minimo AND maximo\n</code></pre> <p>\u00c9 equivalente a:</p> <pre><code>valor &gt;= minimo AND valor &lt;= maximo\n</code></pre>"},{"location":"comandos_sql/comandos/#exemplos-praticos","title":"Exemplos pr\u00e1ticos","text":""},{"location":"comandos_sql/comandos/#1-notas-com-id-entre-2-e-5","title":"1. Notas com <code>id</code> entre 2 e 5","text":"<pre><code>SELECT * FROM notes\nWHERE id BETWEEN 2 AND 5;\n</code></pre>"},{"location":"comandos_sql/comandos/#2-notas-criadas-entre-duas-datas","title":"2. Notas criadas entre duas datas","text":"<pre><code>SELECT * FROM notes\nWHERE created_at BETWEEN '2025-01-01' AND '2025-01-31';\n</code></pre>"},{"location":"comandos_sql/comandos/#3-valores-fora-de-um-intervalo-usando-not-between","title":"3. Valores fora de um intervalo (usando <code>NOT BETWEEN</code>)","text":"<pre><code>SELECT * FROM notes\nWHERE id NOT BETWEEN 2 AND 5;\n</code></pre> <p>\ud83d\udc49 Resumindo:</p> <ul> <li><code>BETWEEN</code> \u2192 inclui os limites do intervalo.</li> <li><code>NOT BETWEEN</code> \u2192 exclui o intervalo.</li> </ul>"},{"location":"comandos_sql/comandos/#11-admin-rapido-no-psql-linha-de-comando","title":"11. Admin R\u00e1pido no psql (linha de comando)","text":"<pre><code>-- Listar bancos\n\\l\n\n-- Conectar a um banco\n\\c trilha_db\n\n-- Listar tabelas\n\\dt\n\n-- Estrutura de uma tabela\n\\d notes\n</code></pre>"}]}